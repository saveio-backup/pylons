// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stream.proto

package messages

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// basic types definition
type ChainID struct {
	ChainId              uint64   `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChainID) Reset()      { *m = ChainID{} }
func (*ChainID) ProtoMessage() {}
func (*ChainID) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_99ad9bcf0115d5db, []int{0}
}
func (m *ChainID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChainID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainID.Merge(dst, src)
}
func (m *ChainID) XXX_Size() int {
	return m.Size()
}
func (m *ChainID) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainID.DiscardUnknown(m)
}

var xxx_messageInfo_ChainID proto.InternalMessageInfo

func (m *ChainID) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

type TokenAmount struct {
	TokenAmount          uint64   `protobuf:"varint,1,opt,name=token_amount,json=tokenAmount,proto3" json:"token_amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenAmount) Reset()      { *m = TokenAmount{} }
func (*TokenAmount) ProtoMessage() {}
func (*TokenAmount) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_99ad9bcf0115d5db, []int{1}
}
func (m *TokenAmount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenAmount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenAmount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TokenAmount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenAmount.Merge(dst, src)
}
func (m *TokenAmount) XXX_Size() int {
	return m.Size()
}
func (m *TokenAmount) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenAmount.DiscardUnknown(m)
}

var xxx_messageInfo_TokenAmount proto.InternalMessageInfo

func (m *TokenAmount) GetTokenAmount() uint64 {
	if m != nil {
		return m.TokenAmount
	}
	return 0
}

type LocksRoot struct {
	LocksRoot            []byte   `protobuf:"bytes,1,opt,name=locks_root,json=locksRoot,proto3" json:"locks_root,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LocksRoot) Reset()      { *m = LocksRoot{} }
func (*LocksRoot) ProtoMessage() {}
func (*LocksRoot) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_99ad9bcf0115d5db, []int{2}
}
func (m *LocksRoot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocksRoot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocksRoot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LocksRoot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocksRoot.Merge(dst, src)
}
func (m *LocksRoot) XXX_Size() int {
	return m.Size()
}
func (m *LocksRoot) XXX_DiscardUnknown() {
	xxx_messageInfo_LocksRoot.DiscardUnknown(m)
}

var xxx_messageInfo_LocksRoot proto.InternalMessageInfo

func (m *LocksRoot) GetLocksRoot() []byte {
	if m != nil {
		return m.LocksRoot
	}
	return nil
}

type ChannelID struct {
	ChannelId            uint64   `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelID) Reset()      { *m = ChannelID{} }
func (*ChannelID) ProtoMessage() {}
func (*ChannelID) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_99ad9bcf0115d5db, []int{3}
}
func (m *ChannelID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChannelID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelID.Merge(dst, src)
}
func (m *ChannelID) XXX_Size() int {
	return m.Size()
}
func (m *ChannelID) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelID.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelID proto.InternalMessageInfo

func (m *ChannelID) GetChannelId() uint64 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

type TokenNetworkAddress struct {
	TokenNetworkAddress  []byte   `protobuf:"bytes,1,opt,name=token_network_address,json=tokenNetworkAddress,proto3" json:"token_network_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenNetworkAddress) Reset()      { *m = TokenNetworkAddress{} }
func (*TokenNetworkAddress) ProtoMessage() {}
func (*TokenNetworkAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_99ad9bcf0115d5db, []int{4}
}
func (m *TokenNetworkAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenNetworkAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenNetworkAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TokenNetworkAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenNetworkAddress.Merge(dst, src)
}
func (m *TokenNetworkAddress) XXX_Size() int {
	return m.Size()
}
func (m *TokenNetworkAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenNetworkAddress.DiscardUnknown(m)
}

var xxx_messageInfo_TokenNetworkAddress proto.InternalMessageInfo

func (m *TokenNetworkAddress) GetTokenNetworkAddress() []byte {
	if m != nil {
		return m.TokenNetworkAddress
	}
	return nil
}

type MessageID struct {
	MessageId            uint64   `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageID) Reset()      { *m = MessageID{} }
func (*MessageID) ProtoMessage() {}
func (*MessageID) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_99ad9bcf0115d5db, []int{5}
}
func (m *MessageID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MessageID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageID.Merge(dst, src)
}
func (m *MessageID) XXX_Size() int {
	return m.Size()
}
func (m *MessageID) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageID.DiscardUnknown(m)
}

var xxx_messageInfo_MessageID proto.InternalMessageInfo

func (m *MessageID) GetMessageId() uint64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

type PaymentID struct {
	PaymentId            uint64   `protobuf:"varint,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PaymentID) Reset()      { *m = PaymentID{} }
func (*PaymentID) ProtoMessage() {}
func (*PaymentID) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_99ad9bcf0115d5db, []int{6}
}
func (m *PaymentID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PaymentID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentID.Merge(dst, src)
}
func (m *PaymentID) XXX_Size() int {
	return m.Size()
}
func (m *PaymentID) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentID.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentID proto.InternalMessageInfo

func (m *PaymentID) GetPaymentId() uint64 {
	if m != nil {
		return m.PaymentId
	}
	return 0
}

type PaymentAmount struct {
	PaymentAmount        uint64   `protobuf:"varint,1,opt,name=payment_amount,json=paymentAmount,proto3" json:"payment_amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PaymentAmount) Reset()      { *m = PaymentAmount{} }
func (*PaymentAmount) ProtoMessage() {}
func (*PaymentAmount) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_99ad9bcf0115d5db, []int{7}
}
func (m *PaymentAmount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentAmount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentAmount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PaymentAmount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentAmount.Merge(dst, src)
}
func (m *PaymentAmount) XXX_Size() int {
	return m.Size()
}
func (m *PaymentAmount) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentAmount.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentAmount proto.InternalMessageInfo

func (m *PaymentAmount) GetPaymentAmount() uint64 {
	if m != nil {
		return m.PaymentAmount
	}
	return 0
}

type SecretHash struct {
	SecretHash           []byte   `protobuf:"bytes,1,opt,name=secret_hash,json=secretHash,proto3" json:"secret_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SecretHash) Reset()      { *m = SecretHash{} }
func (*SecretHash) ProtoMessage() {}
func (*SecretHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_99ad9bcf0115d5db, []int{8}
}
func (m *SecretHash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecretHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecretHash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SecretHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecretHash.Merge(dst, src)
}
func (m *SecretHash) XXX_Size() int {
	return m.Size()
}
func (m *SecretHash) XXX_DiscardUnknown() {
	xxx_messageInfo_SecretHash.DiscardUnknown(m)
}

var xxx_messageInfo_SecretHash proto.InternalMessageInfo

func (m *SecretHash) GetSecretHash() []byte {
	if m != nil {
		return m.SecretHash
	}
	return nil
}

type BlockExpiration struct {
	BlockExpiration      uint64   `protobuf:"varint,1,opt,name=block_expiration,json=blockExpiration,proto3" json:"block_expiration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockExpiration) Reset()      { *m = BlockExpiration{} }
func (*BlockExpiration) ProtoMessage() {}
func (*BlockExpiration) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_99ad9bcf0115d5db, []int{9}
}
func (m *BlockExpiration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockExpiration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockExpiration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BlockExpiration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockExpiration.Merge(dst, src)
}
func (m *BlockExpiration) XXX_Size() int {
	return m.Size()
}
func (m *BlockExpiration) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockExpiration.DiscardUnknown(m)
}

var xxx_messageInfo_BlockExpiration proto.InternalMessageInfo

func (m *BlockExpiration) GetBlockExpiration() uint64 {
	if m != nil {
		return m.BlockExpiration
	}
	return 0
}

type SecretType struct {
	Secret               []byte   `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SecretType) Reset()      { *m = SecretType{} }
func (*SecretType) ProtoMessage() {}
func (*SecretType) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_99ad9bcf0115d5db, []int{10}
}
func (m *SecretType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecretType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecretType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SecretType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecretType.Merge(dst, src)
}
func (m *SecretType) XXX_Size() int {
	return m.Size()
}
func (m *SecretType) XXX_DiscardUnknown() {
	xxx_messageInfo_SecretType.DiscardUnknown(m)
}

var xxx_messageInfo_SecretType proto.InternalMessageInfo

func (m *SecretType) GetSecret() []byte {
	if m != nil {
		return m.Secret
	}
	return nil
}

type EncSecret struct {
	EncSecret            []byte   `protobuf:"bytes,1,opt,name=enc_secret,json=encSecret,proto3" json:"enc_secret,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EncSecret) Reset()      { *m = EncSecret{} }
func (*EncSecret) ProtoMessage() {}
func (*EncSecret) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_99ad9bcf0115d5db, []int{11}
}
func (m *EncSecret) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EncSecret) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EncSecret.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EncSecret) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncSecret.Merge(dst, src)
}
func (m *EncSecret) XXX_Size() int {
	return m.Size()
}
func (m *EncSecret) XXX_DiscardUnknown() {
	xxx_messageInfo_EncSecret.DiscardUnknown(m)
}

var xxx_messageInfo_EncSecret proto.InternalMessageInfo

func (m *EncSecret) GetEncSecret() []byte {
	if m != nil {
		return m.EncSecret
	}
	return nil
}

type Address struct {
	Address              []byte   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()      { *m = Address{} }
func (*Address) ProtoMessage() {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_99ad9bcf0115d5db, []int{12}
}
func (m *Address) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Address.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(dst, src)
}
func (m *Address) XXX_Size() int {
	return m.Size()
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

type HashTimeLock struct {
	Amount               *PaymentAmount   `protobuf:"bytes,1,opt,name=amount" json:"amount,omitempty"`
	Expiration           *BlockExpiration `protobuf:"bytes,2,opt,name=expiration" json:"expiration,omitempty"`
	SecretHash           *SecretHash      `protobuf:"bytes,3,opt,name=secret_hash,json=secretHash" json:"secret_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *HashTimeLock) Reset()      { *m = HashTimeLock{} }
func (*HashTimeLock) ProtoMessage() {}
func (*HashTimeLock) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_99ad9bcf0115d5db, []int{13}
}
func (m *HashTimeLock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HashTimeLock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HashTimeLock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HashTimeLock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HashTimeLock.Merge(dst, src)
}
func (m *HashTimeLock) XXX_Size() int {
	return m.Size()
}
func (m *HashTimeLock) XXX_DiscardUnknown() {
	xxx_messageInfo_HashTimeLock.DiscardUnknown(m)
}

var xxx_messageInfo_HashTimeLock proto.InternalMessageInfo

func (m *HashTimeLock) GetAmount() *PaymentAmount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *HashTimeLock) GetExpiration() *BlockExpiration {
	if m != nil {
		return m.Expiration
	}
	return nil
}

func (m *HashTimeLock) GetSecretHash() *SecretHash {
	if m != nil {
		return m.SecretHash
	}
	return nil
}

// messages definition
// SignedMessage(Message)
type SignedMessage struct {
	Signature            []byte   `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Sender               *Address `protobuf:"bytes,2,opt,name=sender" json:"sender,omitempty"`
	Publickey            []byte   `protobuf:"bytes,3,opt,name=publickey,proto3" json:"publickey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignedMessage) Reset()      { *m = SignedMessage{} }
func (*SignedMessage) ProtoMessage() {}
func (*SignedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_99ad9bcf0115d5db, []int{14}
}
func (m *SignedMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SignedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedMessage.Merge(dst, src)
}
func (m *SignedMessage) XXX_Size() int {
	return m.Size()
}
func (m *SignedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SignedMessage proto.InternalMessageInfo

func (m *SignedMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SignedMessage) GetSender() *Address {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *SignedMessage) GetPublickey() []byte {
	if m != nil {
		return m.Publickey
	}
	return nil
}

// EnvelopeMessage(SignedMessage)
// !!! check data to sign
type EnvelopeMessage struct {
	ChainId              *ChainID             `protobuf:"bytes,1,opt,name=chain_id,json=chainId" json:"chain_id,omitempty"`
	Nonce                uint64               `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	TransferredAmount    *TokenAmount         `protobuf:"bytes,3,opt,name=transferred_amount,json=transferredAmount" json:"transferred_amount,omitempty"`
	LockedAmount         *TokenAmount         `protobuf:"bytes,4,opt,name=locked_amount,json=lockedAmount" json:"locked_amount,omitempty"`
	LocksRoot            *LocksRoot           `protobuf:"bytes,5,opt,name=locks_root,json=locksRoot" json:"locks_root,omitempty"`
	ChannelId            *ChannelID           `protobuf:"bytes,6,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	TokenNetworkAddress  *TokenNetworkAddress `protobuf:"bytes,7,opt,name=token_network_address,json=tokenNetworkAddress" json:"token_network_address,omitempty"`
	Signature            *SignedMessage       `protobuf:"bytes,8,opt,name=signature" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *EnvelopeMessage) Reset()      { *m = EnvelopeMessage{} }
func (*EnvelopeMessage) ProtoMessage() {}
func (*EnvelopeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_99ad9bcf0115d5db, []int{15}
}
func (m *EnvelopeMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnvelopeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnvelopeMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EnvelopeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnvelopeMessage.Merge(dst, src)
}
func (m *EnvelopeMessage) XXX_Size() int {
	return m.Size()
}
func (m *EnvelopeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EnvelopeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EnvelopeMessage proto.InternalMessageInfo

func (m *EnvelopeMessage) GetChainId() *ChainID {
	if m != nil {
		return m.ChainId
	}
	return nil
}

func (m *EnvelopeMessage) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *EnvelopeMessage) GetTransferredAmount() *TokenAmount {
	if m != nil {
		return m.TransferredAmount
	}
	return nil
}

func (m *EnvelopeMessage) GetLockedAmount() *TokenAmount {
	if m != nil {
		return m.LockedAmount
	}
	return nil
}

func (m *EnvelopeMessage) GetLocksRoot() *LocksRoot {
	if m != nil {
		return m.LocksRoot
	}
	return nil
}

func (m *EnvelopeMessage) GetChannelId() *ChannelID {
	if m != nil {
		return m.ChannelId
	}
	return nil
}

func (m *EnvelopeMessage) GetTokenNetworkAddress() *TokenNetworkAddress {
	if m != nil {
		return m.TokenNetworkAddress
	}
	return nil
}

func (m *EnvelopeMessage) GetSignature() *SignedMessage {
	if m != nil {
		return m.Signature
	}
	return nil
}

// Processed(SignedMessage)
type Processed struct {
	MessageId            *MessageID     `protobuf:"bytes,1,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	Signature            *SignedMessage `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Processed) Reset()      { *m = Processed{} }
func (*Processed) ProtoMessage() {}
func (*Processed) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_99ad9bcf0115d5db, []int{16}
}
func (m *Processed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Processed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Processed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Processed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Processed.Merge(dst, src)
}
func (m *Processed) XXX_Size() int {
	return m.Size()
}
func (m *Processed) XXX_DiscardUnknown() {
	xxx_messageInfo_Processed.DiscardUnknown(m)
}

var xxx_messageInfo_Processed proto.InternalMessageInfo

func (m *Processed) GetMessageId() *MessageID {
	if m != nil {
		return m.MessageId
	}
	return nil
}

func (m *Processed) GetSignature() *SignedMessage {
	if m != nil {
		return m.Signature
	}
	return nil
}

// Delivered(SignedMessage)
type Delivered struct {
	DeliveredMessageId   *MessageID     `protobuf:"bytes,1,opt,name=delivered_message_id,json=deliveredMessageId" json:"delivered_message_id,omitempty"`
	Signature            *SignedMessage `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Delivered) Reset()      { *m = Delivered{} }
func (*Delivered) ProtoMessage() {}
func (*Delivered) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_99ad9bcf0115d5db, []int{17}
}
func (m *Delivered) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Delivered) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Delivered.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Delivered) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Delivered.Merge(dst, src)
}
func (m *Delivered) XXX_Size() int {
	return m.Size()
}
func (m *Delivered) XXX_DiscardUnknown() {
	xxx_messageInfo_Delivered.DiscardUnknown(m)
}

var xxx_messageInfo_Delivered proto.InternalMessageInfo

func (m *Delivered) GetDeliveredMessageId() *MessageID {
	if m != nil {
		return m.DeliveredMessageId
	}
	return nil
}

func (m *Delivered) GetSignature() *SignedMessage {
	if m != nil {
		return m.Signature
	}
	return nil
}

// SecretRequest(SignedMessage)
type SecretRequest struct {
	MessageId            *MessageID       `protobuf:"bytes,1,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	PaymentId            *PaymentID       `protobuf:"bytes,2,opt,name=payment_id,json=paymentId" json:"payment_id,omitempty"`
	SecretHash           *SecretHash      `protobuf:"bytes,3,opt,name=secret_hash,json=secretHash" json:"secret_hash,omitempty"`
	Amount               *TokenAmount     `protobuf:"bytes,4,opt,name=amount" json:"amount,omitempty"`
	Expiration           *BlockExpiration `protobuf:"bytes,5,opt,name=expiration" json:"expiration,omitempty"`
	Signature            *SignedMessage   `protobuf:"bytes,6,opt,name=signature" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SecretRequest) Reset()      { *m = SecretRequest{} }
func (*SecretRequest) ProtoMessage() {}
func (*SecretRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_99ad9bcf0115d5db, []int{18}
}
func (m *SecretRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecretRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecretRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SecretRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecretRequest.Merge(dst, src)
}
func (m *SecretRequest) XXX_Size() int {
	return m.Size()
}
func (m *SecretRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SecretRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SecretRequest proto.InternalMessageInfo

func (m *SecretRequest) GetMessageId() *MessageID {
	if m != nil {
		return m.MessageId
	}
	return nil
}

func (m *SecretRequest) GetPaymentId() *PaymentID {
	if m != nil {
		return m.PaymentId
	}
	return nil
}

func (m *SecretRequest) GetSecretHash() *SecretHash {
	if m != nil {
		return m.SecretHash
	}
	return nil
}

func (m *SecretRequest) GetAmount() *TokenAmount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *SecretRequest) GetExpiration() *BlockExpiration {
	if m != nil {
		return m.Expiration
	}
	return nil
}

func (m *SecretRequest) GetSignature() *SignedMessage {
	if m != nil {
		return m.Signature
	}
	return nil
}

// Secret(EnvelopeMessage)
type BalanceProof struct {
	EnvelopeMessage      *EnvelopeMessage `protobuf:"bytes,1,opt,name=envelope_message,json=envelopeMessage" json:"envelope_message,omitempty"`
	MessageId            *MessageID       `protobuf:"bytes,2,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	PaymentId            *PaymentID       `protobuf:"bytes,3,opt,name=payment_id,json=paymentId" json:"payment_id,omitempty"`
	Secret               *SecretType      `protobuf:"bytes,4,opt,name=secret" json:"secret,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BalanceProof) Reset()      { *m = BalanceProof{} }
func (*BalanceProof) ProtoMessage() {}
func (*BalanceProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_99ad9bcf0115d5db, []int{19}
}
func (m *BalanceProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BalanceProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BalanceProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BalanceProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalanceProof.Merge(dst, src)
}
func (m *BalanceProof) XXX_Size() int {
	return m.Size()
}
func (m *BalanceProof) XXX_DiscardUnknown() {
	xxx_messageInfo_BalanceProof.DiscardUnknown(m)
}

var xxx_messageInfo_BalanceProof proto.InternalMessageInfo

func (m *BalanceProof) GetEnvelopeMessage() *EnvelopeMessage {
	if m != nil {
		return m.EnvelopeMessage
	}
	return nil
}

func (m *BalanceProof) GetMessageId() *MessageID {
	if m != nil {
		return m.MessageId
	}
	return nil
}

func (m *BalanceProof) GetPaymentId() *PaymentID {
	if m != nil {
		return m.PaymentId
	}
	return nil
}

func (m *BalanceProof) GetSecret() *SecretType {
	if m != nil {
		return m.Secret
	}
	return nil
}

// RevealSecret(SignedMessage)
type RevealSecret struct {
	MessageId            *MessageID     `protobuf:"bytes,1,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	Secret               *SecretType    `protobuf:"bytes,2,opt,name=secret" json:"secret,omitempty"`
	Signature            *SignedMessage `protobuf:"bytes,6,opt,name=signature" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RevealSecret) Reset()      { *m = RevealSecret{} }
func (*RevealSecret) ProtoMessage() {}
func (*RevealSecret) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_99ad9bcf0115d5db, []int{20}
}
func (m *RevealSecret) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RevealSecret) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RevealSecret.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RevealSecret) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevealSecret.Merge(dst, src)
}
func (m *RevealSecret) XXX_Size() int {
	return m.Size()
}
func (m *RevealSecret) XXX_DiscardUnknown() {
	xxx_messageInfo_RevealSecret.DiscardUnknown(m)
}

var xxx_messageInfo_RevealSecret proto.InternalMessageInfo

func (m *RevealSecret) GetMessageId() *MessageID {
	if m != nil {
		return m.MessageId
	}
	return nil
}

func (m *RevealSecret) GetSecret() *SecretType {
	if m != nil {
		return m.Secret
	}
	return nil
}

func (m *RevealSecret) GetSignature() *SignedMessage {
	if m != nil {
		return m.Signature
	}
	return nil
}

// DirectTransfer(EnvelopeMessage)
type DirectTransfer struct {
	EnvelopeMessage      *EnvelopeMessage `protobuf:"bytes,1,opt,name=envelope_message,json=envelopeMessage" json:"envelope_message,omitempty"`
	MessageId            *MessageID       `protobuf:"bytes,2,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	PaymentId            *PaymentID       `protobuf:"bytes,3,opt,name=payment_id,json=paymentId" json:"payment_id,omitempty"`
	Token                *Address         `protobuf:"bytes,4,opt,name=token" json:"token,omitempty"`
	Recipient            *Address         `protobuf:"bytes,5,opt,name=recipient" json:"recipient,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DirectTransfer) Reset()      { *m = DirectTransfer{} }
func (*DirectTransfer) ProtoMessage() {}
func (*DirectTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_99ad9bcf0115d5db, []int{21}
}
func (m *DirectTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DirectTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectTransfer.Merge(dst, src)
}
func (m *DirectTransfer) XXX_Size() int {
	return m.Size()
}
func (m *DirectTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_DirectTransfer proto.InternalMessageInfo

func (m *DirectTransfer) GetEnvelopeMessage() *EnvelopeMessage {
	if m != nil {
		return m.EnvelopeMessage
	}
	return nil
}

func (m *DirectTransfer) GetMessageId() *MessageID {
	if m != nil {
		return m.MessageId
	}
	return nil
}

func (m *DirectTransfer) GetPaymentId() *PaymentID {
	if m != nil {
		return m.PaymentId
	}
	return nil
}

func (m *DirectTransfer) GetToken() *Address {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *DirectTransfer) GetRecipient() *Address {
	if m != nil {
		return m.Recipient
	}
	return nil
}

// LockedTransferBase(EnvelopeMessage)
type LockedTransferBase struct {
	EnvelopeMessage      *EnvelopeMessage `protobuf:"bytes,1,opt,name=envelope_message,json=envelopeMessage" json:"envelope_message,omitempty"`
	MessageId            *MessageID       `protobuf:"bytes,2,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	PaymentId            *PaymentID       `protobuf:"bytes,3,opt,name=payment_id,json=paymentId" json:"payment_id,omitempty"`
	Token                *Address         `protobuf:"bytes,4,opt,name=token" json:"token,omitempty"`
	Recipient            *Address         `protobuf:"bytes,5,opt,name=recipient" json:"recipient,omitempty"`
	Lock                 *HashTimeLock    `protobuf:"bytes,6,opt,name=lock" json:"lock,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *LockedTransferBase) Reset()      { *m = LockedTransferBase{} }
func (*LockedTransferBase) ProtoMessage() {}
func (*LockedTransferBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_99ad9bcf0115d5db, []int{22}
}
func (m *LockedTransferBase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockedTransferBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockedTransferBase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LockedTransferBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockedTransferBase.Merge(dst, src)
}
func (m *LockedTransferBase) XXX_Size() int {
	return m.Size()
}
func (m *LockedTransferBase) XXX_DiscardUnknown() {
	xxx_messageInfo_LockedTransferBase.DiscardUnknown(m)
}

var xxx_messageInfo_LockedTransferBase proto.InternalMessageInfo

func (m *LockedTransferBase) GetEnvelopeMessage() *EnvelopeMessage {
	if m != nil {
		return m.EnvelopeMessage
	}
	return nil
}

func (m *LockedTransferBase) GetMessageId() *MessageID {
	if m != nil {
		return m.MessageId
	}
	return nil
}

func (m *LockedTransferBase) GetPaymentId() *PaymentID {
	if m != nil {
		return m.PaymentId
	}
	return nil
}

func (m *LockedTransferBase) GetToken() *Address {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *LockedTransferBase) GetRecipient() *Address {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *LockedTransferBase) GetLock() *HashTimeLock {
	if m != nil {
		return m.Lock
	}
	return nil
}

// LockedTransfer(LockedTransferBase)
type LockedTransfer struct {
	BaseMessage          *LockedTransferBase `protobuf:"bytes,1,opt,name=base_message,json=baseMessage" json:"base_message,omitempty"`
	Initiator            *Address            `protobuf:"bytes,2,opt,name=initiator" json:"initiator,omitempty"`
	Target               *Address            `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	EncSecret            *EncSecret          `protobuf:"bytes,4,opt,name=enc_secret,json=encSecret" json:"enc_secret,omitempty"`
	Fee                  uint32              `protobuf:"varint,5,opt,name=fee,proto3" json:"fee,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *LockedTransfer) Reset()      { *m = LockedTransfer{} }
func (*LockedTransfer) ProtoMessage() {}
func (*LockedTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_99ad9bcf0115d5db, []int{23}
}
func (m *LockedTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockedTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockedTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LockedTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockedTransfer.Merge(dst, src)
}
func (m *LockedTransfer) XXX_Size() int {
	return m.Size()
}
func (m *LockedTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_LockedTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_LockedTransfer proto.InternalMessageInfo

func (m *LockedTransfer) GetBaseMessage() *LockedTransferBase {
	if m != nil {
		return m.BaseMessage
	}
	return nil
}

func (m *LockedTransfer) GetInitiator() *Address {
	if m != nil {
		return m.Initiator
	}
	return nil
}

func (m *LockedTransfer) GetTarget() *Address {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *LockedTransfer) GetEncSecret() *EncSecret {
	if m != nil {
		return m.EncSecret
	}
	return nil
}

func (m *LockedTransfer) GetFee() uint32 {
	if m != nil {
		return m.Fee
	}
	return 0
}

// RefundTransfer(LockedTransfer)
type RefundTransfer struct {
	Refund               *LockedTransfer `protobuf:"bytes,1,opt,name=refund" json:"refund,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RefundTransfer) Reset()      { *m = RefundTransfer{} }
func (*RefundTransfer) ProtoMessage() {}
func (*RefundTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_99ad9bcf0115d5db, []int{24}
}
func (m *RefundTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefundTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefundTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RefundTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefundTransfer.Merge(dst, src)
}
func (m *RefundTransfer) XXX_Size() int {
	return m.Size()
}
func (m *RefundTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_RefundTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_RefundTransfer proto.InternalMessageInfo

func (m *RefundTransfer) GetRefund() *LockedTransfer {
	if m != nil {
		return m.Refund
	}
	return nil
}

// LockExpired(EnvelopeMessage)
type LockExpired struct {
	EnvelopeMessage      *EnvelopeMessage `protobuf:"bytes,1,opt,name=envelope_message,json=envelopeMessage" json:"envelope_message,omitempty"`
	MessageId            *MessageID       `protobuf:"bytes,2,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	Recipient            *Address         `protobuf:"bytes,3,opt,name=recipient" json:"recipient,omitempty"`
	SecretHash           *SecretHash      `protobuf:"bytes,4,opt,name=secret_hash,json=secretHash" json:"secret_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *LockExpired) Reset()      { *m = LockExpired{} }
func (*LockExpired) ProtoMessage() {}
func (*LockExpired) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_99ad9bcf0115d5db, []int{25}
}
func (m *LockExpired) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockExpired) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockExpired.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LockExpired) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockExpired.Merge(dst, src)
}
func (m *LockExpired) XXX_Size() int {
	return m.Size()
}
func (m *LockExpired) XXX_DiscardUnknown() {
	xxx_messageInfo_LockExpired.DiscardUnknown(m)
}

var xxx_messageInfo_LockExpired proto.InternalMessageInfo

func (m *LockExpired) GetEnvelopeMessage() *EnvelopeMessage {
	if m != nil {
		return m.EnvelopeMessage
	}
	return nil
}

func (m *LockExpired) GetMessageId() *MessageID {
	if m != nil {
		return m.MessageId
	}
	return nil
}

func (m *LockExpired) GetRecipient() *Address {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *LockExpired) GetSecretHash() *SecretHash {
	if m != nil {
		return m.SecretHash
	}
	return nil
}

type WithdrawRequest struct {
	TokenNetworkAddress  *TokenNetworkAddress `protobuf:"bytes,1,opt,name=token_network_address,json=tokenNetworkAddress" json:"token_network_address,omitempty"`
	MessageId            *MessageID           `protobuf:"bytes,2,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	ChannelId            *ChannelID           `protobuf:"bytes,3,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	Participant          *Address             `protobuf:"bytes,4,opt,name=participant" json:"participant,omitempty"`
	WithdrawAmount       *TokenAmount         `protobuf:"bytes,5,opt,name=withdraw_amount,json=withdrawAmount" json:"withdraw_amount,omitempty"`
	ParticipantSignature *SignedMessage       `protobuf:"bytes,6,opt,name=participant_signature,json=participantSignature" json:"participant_signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *WithdrawRequest) Reset()      { *m = WithdrawRequest{} }
func (*WithdrawRequest) ProtoMessage() {}
func (*WithdrawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_99ad9bcf0115d5db, []int{26}
}
func (m *WithdrawRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *WithdrawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawRequest.Merge(dst, src)
}
func (m *WithdrawRequest) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawRequest proto.InternalMessageInfo

func (m *WithdrawRequest) GetTokenNetworkAddress() *TokenNetworkAddress {
	if m != nil {
		return m.TokenNetworkAddress
	}
	return nil
}

func (m *WithdrawRequest) GetMessageId() *MessageID {
	if m != nil {
		return m.MessageId
	}
	return nil
}

func (m *WithdrawRequest) GetChannelId() *ChannelID {
	if m != nil {
		return m.ChannelId
	}
	return nil
}

func (m *WithdrawRequest) GetParticipant() *Address {
	if m != nil {
		return m.Participant
	}
	return nil
}

func (m *WithdrawRequest) GetWithdrawAmount() *TokenAmount {
	if m != nil {
		return m.WithdrawAmount
	}
	return nil
}

func (m *WithdrawRequest) GetParticipantSignature() *SignedMessage {
	if m != nil {
		return m.ParticipantSignature
	}
	return nil
}

type Withdraw struct {
	TokenNetworkAddress  *TokenNetworkAddress `protobuf:"bytes,1,opt,name=token_network_address,json=tokenNetworkAddress" json:"token_network_address,omitempty"`
	MessageId            *MessageID           `protobuf:"bytes,2,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	ChannelId            *ChannelID           `protobuf:"bytes,3,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	Participant          *Address             `protobuf:"bytes,4,opt,name=participant" json:"participant,omitempty"`
	WithdrawAmount       *TokenAmount         `protobuf:"bytes,5,opt,name=withdraw_amount,json=withdrawAmount" json:"withdraw_amount,omitempty"`
	ParticipantSignature *SignedMessage       `protobuf:"bytes,6,opt,name=participant_signature,json=participantSignature" json:"participant_signature,omitempty"`
	PartnerSignature     *SignedMessage       `protobuf:"bytes,7,opt,name=partner_signature,json=partnerSignature" json:"partner_signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Withdraw) Reset()      { *m = Withdraw{} }
func (*Withdraw) ProtoMessage() {}
func (*Withdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_99ad9bcf0115d5db, []int{27}
}
func (m *Withdraw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Withdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Withdraw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Withdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Withdraw.Merge(dst, src)
}
func (m *Withdraw) XXX_Size() int {
	return m.Size()
}
func (m *Withdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_Withdraw.DiscardUnknown(m)
}

var xxx_messageInfo_Withdraw proto.InternalMessageInfo

func (m *Withdraw) GetTokenNetworkAddress() *TokenNetworkAddress {
	if m != nil {
		return m.TokenNetworkAddress
	}
	return nil
}

func (m *Withdraw) GetMessageId() *MessageID {
	if m != nil {
		return m.MessageId
	}
	return nil
}

func (m *Withdraw) GetChannelId() *ChannelID {
	if m != nil {
		return m.ChannelId
	}
	return nil
}

func (m *Withdraw) GetParticipant() *Address {
	if m != nil {
		return m.Participant
	}
	return nil
}

func (m *Withdraw) GetWithdrawAmount() *TokenAmount {
	if m != nil {
		return m.WithdrawAmount
	}
	return nil
}

func (m *Withdraw) GetParticipantSignature() *SignedMessage {
	if m != nil {
		return m.ParticipantSignature
	}
	return nil
}

func (m *Withdraw) GetPartnerSignature() *SignedMessage {
	if m != nil {
		return m.PartnerSignature
	}
	return nil
}

type CooperativeSettleRequest struct {
	TokenNetworkAddress   *TokenNetworkAddress `protobuf:"bytes,1,opt,name=token_network_address,json=tokenNetworkAddress" json:"token_network_address,omitempty"`
	MessageId             *MessageID           `protobuf:"bytes,2,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	ChannelId             *ChannelID           `protobuf:"bytes,3,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	Participant1          *Address             `protobuf:"bytes,4,opt,name=participant1" json:"participant1,omitempty"`
	Participant1Balance   *TokenAmount         `protobuf:"bytes,5,opt,name=participant1_balance,json=participant1Balance" json:"participant1_balance,omitempty"`
	Participant2          *Address             `protobuf:"bytes,6,opt,name=participant2" json:"participant2,omitempty"`
	Participant2Balance   *TokenAmount         `protobuf:"bytes,7,opt,name=participant2_balance,json=participant2Balance" json:"participant2_balance,omitempty"`
	Participant1Signature *SignedMessage       `protobuf:"bytes,8,opt,name=participant1_signature,json=participant1Signature" json:"participant1_signature,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}             `json:"-"`
	XXX_unrecognized      []byte               `json:"-"`
	XXX_sizecache         int32                `json:"-"`
}

func (m *CooperativeSettleRequest) Reset()      { *m = CooperativeSettleRequest{} }
func (*CooperativeSettleRequest) ProtoMessage() {}
func (*CooperativeSettleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_99ad9bcf0115d5db, []int{28}
}
func (m *CooperativeSettleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CooperativeSettleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CooperativeSettleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CooperativeSettleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CooperativeSettleRequest.Merge(dst, src)
}
func (m *CooperativeSettleRequest) XXX_Size() int {
	return m.Size()
}
func (m *CooperativeSettleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CooperativeSettleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CooperativeSettleRequest proto.InternalMessageInfo

func (m *CooperativeSettleRequest) GetTokenNetworkAddress() *TokenNetworkAddress {
	if m != nil {
		return m.TokenNetworkAddress
	}
	return nil
}

func (m *CooperativeSettleRequest) GetMessageId() *MessageID {
	if m != nil {
		return m.MessageId
	}
	return nil
}

func (m *CooperativeSettleRequest) GetChannelId() *ChannelID {
	if m != nil {
		return m.ChannelId
	}
	return nil
}

func (m *CooperativeSettleRequest) GetParticipant1() *Address {
	if m != nil {
		return m.Participant1
	}
	return nil
}

func (m *CooperativeSettleRequest) GetParticipant1Balance() *TokenAmount {
	if m != nil {
		return m.Participant1Balance
	}
	return nil
}

func (m *CooperativeSettleRequest) GetParticipant2() *Address {
	if m != nil {
		return m.Participant2
	}
	return nil
}

func (m *CooperativeSettleRequest) GetParticipant2Balance() *TokenAmount {
	if m != nil {
		return m.Participant2Balance
	}
	return nil
}

func (m *CooperativeSettleRequest) GetParticipant1Signature() *SignedMessage {
	if m != nil {
		return m.Participant1Signature
	}
	return nil
}

type CooperativeSettle struct {
	TokenNetworkAddress   *TokenNetworkAddress `protobuf:"bytes,1,opt,name=token_network_address,json=tokenNetworkAddress" json:"token_network_address,omitempty"`
	MessageId             *MessageID           `protobuf:"bytes,2,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	ChannelId             *ChannelID           `protobuf:"bytes,3,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	Participant1          *Address             `protobuf:"bytes,4,opt,name=participant1" json:"participant1,omitempty"`
	Participant1Balance   *TokenAmount         `protobuf:"bytes,5,opt,name=participant1_balance,json=participant1Balance" json:"participant1_balance,omitempty"`
	Participant2          *Address             `protobuf:"bytes,6,opt,name=participant2" json:"participant2,omitempty"`
	Participant2Balance   *TokenAmount         `protobuf:"bytes,7,opt,name=participant2_balance,json=participant2Balance" json:"participant2_balance,omitempty"`
	Participant1Signature *SignedMessage       `protobuf:"bytes,8,opt,name=participant1_signature,json=participant1Signature" json:"participant1_signature,omitempty"`
	Participant2Signature *SignedMessage       `protobuf:"bytes,9,opt,name=participant2_signature,json=participant2Signature" json:"participant2_signature,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}             `json:"-"`
	XXX_unrecognized      []byte               `json:"-"`
	XXX_sizecache         int32                `json:"-"`
}

func (m *CooperativeSettle) Reset()      { *m = CooperativeSettle{} }
func (*CooperativeSettle) ProtoMessage() {}
func (*CooperativeSettle) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_99ad9bcf0115d5db, []int{29}
}
func (m *CooperativeSettle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CooperativeSettle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CooperativeSettle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CooperativeSettle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CooperativeSettle.Merge(dst, src)
}
func (m *CooperativeSettle) XXX_Size() int {
	return m.Size()
}
func (m *CooperativeSettle) XXX_DiscardUnknown() {
	xxx_messageInfo_CooperativeSettle.DiscardUnknown(m)
}

var xxx_messageInfo_CooperativeSettle proto.InternalMessageInfo

func (m *CooperativeSettle) GetTokenNetworkAddress() *TokenNetworkAddress {
	if m != nil {
		return m.TokenNetworkAddress
	}
	return nil
}

func (m *CooperativeSettle) GetMessageId() *MessageID {
	if m != nil {
		return m.MessageId
	}
	return nil
}

func (m *CooperativeSettle) GetChannelId() *ChannelID {
	if m != nil {
		return m.ChannelId
	}
	return nil
}

func (m *CooperativeSettle) GetParticipant1() *Address {
	if m != nil {
		return m.Participant1
	}
	return nil
}

func (m *CooperativeSettle) GetParticipant1Balance() *TokenAmount {
	if m != nil {
		return m.Participant1Balance
	}
	return nil
}

func (m *CooperativeSettle) GetParticipant2() *Address {
	if m != nil {
		return m.Participant2
	}
	return nil
}

func (m *CooperativeSettle) GetParticipant2Balance() *TokenAmount {
	if m != nil {
		return m.Participant2Balance
	}
	return nil
}

func (m *CooperativeSettle) GetParticipant1Signature() *SignedMessage {
	if m != nil {
		return m.Participant1Signature
	}
	return nil
}

func (m *CooperativeSettle) GetParticipant2Signature() *SignedMessage {
	if m != nil {
		return m.Participant2Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*ChainID)(nil), "messages.ChainID")
	proto.RegisterType((*TokenAmount)(nil), "messages.TokenAmount")
	proto.RegisterType((*LocksRoot)(nil), "messages.LocksRoot")
	proto.RegisterType((*ChannelID)(nil), "messages.ChannelID")
	proto.RegisterType((*TokenNetworkAddress)(nil), "messages.TokenNetworkAddress")
	proto.RegisterType((*MessageID)(nil), "messages.MessageID")
	proto.RegisterType((*PaymentID)(nil), "messages.PaymentID")
	proto.RegisterType((*PaymentAmount)(nil), "messages.PaymentAmount")
	proto.RegisterType((*SecretHash)(nil), "messages.SecretHash")
	proto.RegisterType((*BlockExpiration)(nil), "messages.BlockExpiration")
	proto.RegisterType((*SecretType)(nil), "messages.SecretType")
	proto.RegisterType((*EncSecret)(nil), "messages.EncSecret")
	proto.RegisterType((*Address)(nil), "messages.Address")
	proto.RegisterType((*HashTimeLock)(nil), "messages.HashTimeLock")
	proto.RegisterType((*SignedMessage)(nil), "messages.SignedMessage")
	proto.RegisterType((*EnvelopeMessage)(nil), "messages.EnvelopeMessage")
	proto.RegisterType((*Processed)(nil), "messages.Processed")
	proto.RegisterType((*Delivered)(nil), "messages.Delivered")
	proto.RegisterType((*SecretRequest)(nil), "messages.SecretRequest")
	proto.RegisterType((*BalanceProof)(nil), "messages.BalanceProof")
	proto.RegisterType((*RevealSecret)(nil), "messages.RevealSecret")
	proto.RegisterType((*DirectTransfer)(nil), "messages.DirectTransfer")
	proto.RegisterType((*LockedTransferBase)(nil), "messages.LockedTransferBase")
	proto.RegisterType((*LockedTransfer)(nil), "messages.LockedTransfer")
	proto.RegisterType((*RefundTransfer)(nil), "messages.RefundTransfer")
	proto.RegisterType((*LockExpired)(nil), "messages.LockExpired")
	proto.RegisterType((*WithdrawRequest)(nil), "messages.WithdrawRequest")
	proto.RegisterType((*Withdraw)(nil), "messages.Withdraw")
	proto.RegisterType((*CooperativeSettleRequest)(nil), "messages.CooperativeSettleRequest")
	proto.RegisterType((*CooperativeSettle)(nil), "messages.CooperativeSettle")
}
func (this *ChainID) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ChainID)
	if !ok {
		that2, ok := that.(ChainID)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ChainID")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ChainID but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ChainID but is not nil && this == nil")
	}
	if this.ChainId != that1.ChainId {
		return fmt.Errorf("ChainId this(%v) Not Equal that(%v)", this.ChainId, that1.ChainId)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ChainID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChainID)
	if !ok {
		that2, ok := that.(ChainID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChainId != that1.ChainId {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TokenAmount) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TokenAmount)
	if !ok {
		that2, ok := that.(TokenAmount)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TokenAmount")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *TokenAmount but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *TokenAmount but is not nil && this == nil")
	}
	if this.TokenAmount != that1.TokenAmount {
		return fmt.Errorf("TokenAmount this(%v) Not Equal that(%v)", this.TokenAmount, that1.TokenAmount)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *TokenAmount) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TokenAmount)
	if !ok {
		that2, ok := that.(TokenAmount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TokenAmount != that1.TokenAmount {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LocksRoot) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*LocksRoot)
	if !ok {
		that2, ok := that.(LocksRoot)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *LocksRoot")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *LocksRoot but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *LocksRoot but is not nil && this == nil")
	}
	if !bytes.Equal(this.LocksRoot, that1.LocksRoot) {
		return fmt.Errorf("LocksRoot this(%v) Not Equal that(%v)", this.LocksRoot, that1.LocksRoot)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *LocksRoot) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LocksRoot)
	if !ok {
		that2, ok := that.(LocksRoot)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.LocksRoot, that1.LocksRoot) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ChannelID) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ChannelID)
	if !ok {
		that2, ok := that.(ChannelID)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ChannelID")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ChannelID but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ChannelID but is not nil && this == nil")
	}
	if this.ChannelId != that1.ChannelId {
		return fmt.Errorf("ChannelId this(%v) Not Equal that(%v)", this.ChannelId, that1.ChannelId)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ChannelID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChannelID)
	if !ok {
		that2, ok := that.(ChannelID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChannelId != that1.ChannelId {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TokenNetworkAddress) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TokenNetworkAddress)
	if !ok {
		that2, ok := that.(TokenNetworkAddress)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *TokenNetworkAddress")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *TokenNetworkAddress but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *TokenNetworkAddress but is not nil && this == nil")
	}
	if !bytes.Equal(this.TokenNetworkAddress, that1.TokenNetworkAddress) {
		return fmt.Errorf("TokenNetworkAddress this(%v) Not Equal that(%v)", this.TokenNetworkAddress, that1.TokenNetworkAddress)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *TokenNetworkAddress) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TokenNetworkAddress)
	if !ok {
		that2, ok := that.(TokenNetworkAddress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.TokenNetworkAddress, that1.TokenNetworkAddress) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MessageID) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MessageID)
	if !ok {
		that2, ok := that.(MessageID)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MessageID")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MessageID but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MessageID but is not nil && this == nil")
	}
	if this.MessageId != that1.MessageId {
		return fmt.Errorf("MessageId this(%v) Not Equal that(%v)", this.MessageId, that1.MessageId)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *MessageID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageID)
	if !ok {
		that2, ok := that.(MessageID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MessageId != that1.MessageId {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PaymentID) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PaymentID)
	if !ok {
		that2, ok := that.(PaymentID)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PaymentID")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PaymentID but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PaymentID but is not nil && this == nil")
	}
	if this.PaymentId != that1.PaymentId {
		return fmt.Errorf("PaymentId this(%v) Not Equal that(%v)", this.PaymentId, that1.PaymentId)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *PaymentID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PaymentID)
	if !ok {
		that2, ok := that.(PaymentID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PaymentId != that1.PaymentId {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PaymentAmount) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PaymentAmount)
	if !ok {
		that2, ok := that.(PaymentAmount)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PaymentAmount")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PaymentAmount but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PaymentAmount but is not nil && this == nil")
	}
	if this.PaymentAmount != that1.PaymentAmount {
		return fmt.Errorf("PaymentAmount this(%v) Not Equal that(%v)", this.PaymentAmount, that1.PaymentAmount)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *PaymentAmount) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PaymentAmount)
	if !ok {
		that2, ok := that.(PaymentAmount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PaymentAmount != that1.PaymentAmount {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SecretHash) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SecretHash)
	if !ok {
		that2, ok := that.(SecretHash)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SecretHash")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SecretHash but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SecretHash but is not nil && this == nil")
	}
	if !bytes.Equal(this.SecretHash, that1.SecretHash) {
		return fmt.Errorf("SecretHash this(%v) Not Equal that(%v)", this.SecretHash, that1.SecretHash)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *SecretHash) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecretHash)
	if !ok {
		that2, ok := that.(SecretHash)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.SecretHash, that1.SecretHash) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BlockExpiration) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BlockExpiration)
	if !ok {
		that2, ok := that.(BlockExpiration)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BlockExpiration")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BlockExpiration but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BlockExpiration but is not nil && this == nil")
	}
	if this.BlockExpiration != that1.BlockExpiration {
		return fmt.Errorf("BlockExpiration this(%v) Not Equal that(%v)", this.BlockExpiration, that1.BlockExpiration)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *BlockExpiration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BlockExpiration)
	if !ok {
		that2, ok := that.(BlockExpiration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BlockExpiration != that1.BlockExpiration {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SecretType) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SecretType)
	if !ok {
		that2, ok := that.(SecretType)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SecretType")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SecretType but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SecretType but is not nil && this == nil")
	}
	if !bytes.Equal(this.Secret, that1.Secret) {
		return fmt.Errorf("Secret this(%v) Not Equal that(%v)", this.Secret, that1.Secret)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *SecretType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecretType)
	if !ok {
		that2, ok := that.(SecretType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Secret, that1.Secret) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *EncSecret) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*EncSecret)
	if !ok {
		that2, ok := that.(EncSecret)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *EncSecret")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *EncSecret but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *EncSecret but is not nil && this == nil")
	}
	if !bytes.Equal(this.EncSecret, that1.EncSecret) {
		return fmt.Errorf("EncSecret this(%v) Not Equal that(%v)", this.EncSecret, that1.EncSecret)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *EncSecret) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EncSecret)
	if !ok {
		that2, ok := that.(EncSecret)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.EncSecret, that1.EncSecret) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Address) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Address)
	if !ok {
		that2, ok := that.(Address)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Address")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Address but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Address but is not nil && this == nil")
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return fmt.Errorf("Address this(%v) Not Equal that(%v)", this.Address, that1.Address)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Address) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Address)
	if !ok {
		that2, ok := that.(Address)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HashTimeLock) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*HashTimeLock)
	if !ok {
		that2, ok := that.(HashTimeLock)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *HashTimeLock")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *HashTimeLock but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *HashTimeLock but is not nil && this == nil")
	}
	if !this.Amount.Equal(that1.Amount) {
		return fmt.Errorf("Amount this(%v) Not Equal that(%v)", this.Amount, that1.Amount)
	}
	if !this.Expiration.Equal(that1.Expiration) {
		return fmt.Errorf("Expiration this(%v) Not Equal that(%v)", this.Expiration, that1.Expiration)
	}
	if !this.SecretHash.Equal(that1.SecretHash) {
		return fmt.Errorf("SecretHash this(%v) Not Equal that(%v)", this.SecretHash, that1.SecretHash)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *HashTimeLock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HashTimeLock)
	if !ok {
		that2, ok := that.(HashTimeLock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	if !this.Expiration.Equal(that1.Expiration) {
		return false
	}
	if !this.SecretHash.Equal(that1.SecretHash) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SignedMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SignedMessage)
	if !ok {
		that2, ok := that.(SignedMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SignedMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SignedMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SignedMessage but is not nil && this == nil")
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return fmt.Errorf("Signature this(%v) Not Equal that(%v)", this.Signature, that1.Signature)
	}
	if !this.Sender.Equal(that1.Sender) {
		return fmt.Errorf("Sender this(%v) Not Equal that(%v)", this.Sender, that1.Sender)
	}
	if !bytes.Equal(this.Publickey, that1.Publickey) {
		return fmt.Errorf("Publickey this(%v) Not Equal that(%v)", this.Publickey, that1.Publickey)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *SignedMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignedMessage)
	if !ok {
		that2, ok := that.(SignedMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	if !bytes.Equal(this.Publickey, that1.Publickey) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *EnvelopeMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*EnvelopeMessage)
	if !ok {
		that2, ok := that.(EnvelopeMessage)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *EnvelopeMessage")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *EnvelopeMessage but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *EnvelopeMessage but is not nil && this == nil")
	}
	if !this.ChainId.Equal(that1.ChainId) {
		return fmt.Errorf("ChainId this(%v) Not Equal that(%v)", this.ChainId, that1.ChainId)
	}
	if this.Nonce != that1.Nonce {
		return fmt.Errorf("Nonce this(%v) Not Equal that(%v)", this.Nonce, that1.Nonce)
	}
	if !this.TransferredAmount.Equal(that1.TransferredAmount) {
		return fmt.Errorf("TransferredAmount this(%v) Not Equal that(%v)", this.TransferredAmount, that1.TransferredAmount)
	}
	if !this.LockedAmount.Equal(that1.LockedAmount) {
		return fmt.Errorf("LockedAmount this(%v) Not Equal that(%v)", this.LockedAmount, that1.LockedAmount)
	}
	if !this.LocksRoot.Equal(that1.LocksRoot) {
		return fmt.Errorf("LocksRoot this(%v) Not Equal that(%v)", this.LocksRoot, that1.LocksRoot)
	}
	if !this.ChannelId.Equal(that1.ChannelId) {
		return fmt.Errorf("ChannelId this(%v) Not Equal that(%v)", this.ChannelId, that1.ChannelId)
	}
	if !this.TokenNetworkAddress.Equal(that1.TokenNetworkAddress) {
		return fmt.Errorf("TokenNetworkAddress this(%v) Not Equal that(%v)", this.TokenNetworkAddress, that1.TokenNetworkAddress)
	}
	if !this.Signature.Equal(that1.Signature) {
		return fmt.Errorf("Signature this(%v) Not Equal that(%v)", this.Signature, that1.Signature)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *EnvelopeMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnvelopeMessage)
	if !ok {
		that2, ok := that.(EnvelopeMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ChainId.Equal(that1.ChainId) {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if !this.TransferredAmount.Equal(that1.TransferredAmount) {
		return false
	}
	if !this.LockedAmount.Equal(that1.LockedAmount) {
		return false
	}
	if !this.LocksRoot.Equal(that1.LocksRoot) {
		return false
	}
	if !this.ChannelId.Equal(that1.ChannelId) {
		return false
	}
	if !this.TokenNetworkAddress.Equal(that1.TokenNetworkAddress) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Processed) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Processed)
	if !ok {
		that2, ok := that.(Processed)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Processed")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Processed but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Processed but is not nil && this == nil")
	}
	if !this.MessageId.Equal(that1.MessageId) {
		return fmt.Errorf("MessageId this(%v) Not Equal that(%v)", this.MessageId, that1.MessageId)
	}
	if !this.Signature.Equal(that1.Signature) {
		return fmt.Errorf("Signature this(%v) Not Equal that(%v)", this.Signature, that1.Signature)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Processed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Processed)
	if !ok {
		that2, ok := that.(Processed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MessageId.Equal(that1.MessageId) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Delivered) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Delivered)
	if !ok {
		that2, ok := that.(Delivered)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Delivered")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Delivered but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Delivered but is not nil && this == nil")
	}
	if !this.DeliveredMessageId.Equal(that1.DeliveredMessageId) {
		return fmt.Errorf("DeliveredMessageId this(%v) Not Equal that(%v)", this.DeliveredMessageId, that1.DeliveredMessageId)
	}
	if !this.Signature.Equal(that1.Signature) {
		return fmt.Errorf("Signature this(%v) Not Equal that(%v)", this.Signature, that1.Signature)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Delivered) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Delivered)
	if !ok {
		that2, ok := that.(Delivered)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DeliveredMessageId.Equal(that1.DeliveredMessageId) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SecretRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SecretRequest)
	if !ok {
		that2, ok := that.(SecretRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SecretRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SecretRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SecretRequest but is not nil && this == nil")
	}
	if !this.MessageId.Equal(that1.MessageId) {
		return fmt.Errorf("MessageId this(%v) Not Equal that(%v)", this.MessageId, that1.MessageId)
	}
	if !this.PaymentId.Equal(that1.PaymentId) {
		return fmt.Errorf("PaymentId this(%v) Not Equal that(%v)", this.PaymentId, that1.PaymentId)
	}
	if !this.SecretHash.Equal(that1.SecretHash) {
		return fmt.Errorf("SecretHash this(%v) Not Equal that(%v)", this.SecretHash, that1.SecretHash)
	}
	if !this.Amount.Equal(that1.Amount) {
		return fmt.Errorf("Amount this(%v) Not Equal that(%v)", this.Amount, that1.Amount)
	}
	if !this.Expiration.Equal(that1.Expiration) {
		return fmt.Errorf("Expiration this(%v) Not Equal that(%v)", this.Expiration, that1.Expiration)
	}
	if !this.Signature.Equal(that1.Signature) {
		return fmt.Errorf("Signature this(%v) Not Equal that(%v)", this.Signature, that1.Signature)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *SecretRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecretRequest)
	if !ok {
		that2, ok := that.(SecretRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MessageId.Equal(that1.MessageId) {
		return false
	}
	if !this.PaymentId.Equal(that1.PaymentId) {
		return false
	}
	if !this.SecretHash.Equal(that1.SecretHash) {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	if !this.Expiration.Equal(that1.Expiration) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BalanceProof) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BalanceProof)
	if !ok {
		that2, ok := that.(BalanceProof)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BalanceProof")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BalanceProof but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BalanceProof but is not nil && this == nil")
	}
	if !this.EnvelopeMessage.Equal(that1.EnvelopeMessage) {
		return fmt.Errorf("EnvelopeMessage this(%v) Not Equal that(%v)", this.EnvelopeMessage, that1.EnvelopeMessage)
	}
	if !this.MessageId.Equal(that1.MessageId) {
		return fmt.Errorf("MessageId this(%v) Not Equal that(%v)", this.MessageId, that1.MessageId)
	}
	if !this.PaymentId.Equal(that1.PaymentId) {
		return fmt.Errorf("PaymentId this(%v) Not Equal that(%v)", this.PaymentId, that1.PaymentId)
	}
	if !this.Secret.Equal(that1.Secret) {
		return fmt.Errorf("Secret this(%v) Not Equal that(%v)", this.Secret, that1.Secret)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *BalanceProof) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BalanceProof)
	if !ok {
		that2, ok := that.(BalanceProof)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnvelopeMessage.Equal(that1.EnvelopeMessage) {
		return false
	}
	if !this.MessageId.Equal(that1.MessageId) {
		return false
	}
	if !this.PaymentId.Equal(that1.PaymentId) {
		return false
	}
	if !this.Secret.Equal(that1.Secret) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RevealSecret) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RevealSecret)
	if !ok {
		that2, ok := that.(RevealSecret)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RevealSecret")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RevealSecret but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RevealSecret but is not nil && this == nil")
	}
	if !this.MessageId.Equal(that1.MessageId) {
		return fmt.Errorf("MessageId this(%v) Not Equal that(%v)", this.MessageId, that1.MessageId)
	}
	if !this.Secret.Equal(that1.Secret) {
		return fmt.Errorf("Secret this(%v) Not Equal that(%v)", this.Secret, that1.Secret)
	}
	if !this.Signature.Equal(that1.Signature) {
		return fmt.Errorf("Signature this(%v) Not Equal that(%v)", this.Signature, that1.Signature)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *RevealSecret) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RevealSecret)
	if !ok {
		that2, ok := that.(RevealSecret)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MessageId.Equal(that1.MessageId) {
		return false
	}
	if !this.Secret.Equal(that1.Secret) {
		return false
	}
	if !this.Signature.Equal(that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DirectTransfer) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DirectTransfer)
	if !ok {
		that2, ok := that.(DirectTransfer)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DirectTransfer")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DirectTransfer but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DirectTransfer but is not nil && this == nil")
	}
	if !this.EnvelopeMessage.Equal(that1.EnvelopeMessage) {
		return fmt.Errorf("EnvelopeMessage this(%v) Not Equal that(%v)", this.EnvelopeMessage, that1.EnvelopeMessage)
	}
	if !this.MessageId.Equal(that1.MessageId) {
		return fmt.Errorf("MessageId this(%v) Not Equal that(%v)", this.MessageId, that1.MessageId)
	}
	if !this.PaymentId.Equal(that1.PaymentId) {
		return fmt.Errorf("PaymentId this(%v) Not Equal that(%v)", this.PaymentId, that1.PaymentId)
	}
	if !this.Token.Equal(that1.Token) {
		return fmt.Errorf("Token this(%v) Not Equal that(%v)", this.Token, that1.Token)
	}
	if !this.Recipient.Equal(that1.Recipient) {
		return fmt.Errorf("Recipient this(%v) Not Equal that(%v)", this.Recipient, that1.Recipient)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *DirectTransfer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DirectTransfer)
	if !ok {
		that2, ok := that.(DirectTransfer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnvelopeMessage.Equal(that1.EnvelopeMessage) {
		return false
	}
	if !this.MessageId.Equal(that1.MessageId) {
		return false
	}
	if !this.PaymentId.Equal(that1.PaymentId) {
		return false
	}
	if !this.Token.Equal(that1.Token) {
		return false
	}
	if !this.Recipient.Equal(that1.Recipient) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LockedTransferBase) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*LockedTransferBase)
	if !ok {
		that2, ok := that.(LockedTransferBase)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *LockedTransferBase")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *LockedTransferBase but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *LockedTransferBase but is not nil && this == nil")
	}
	if !this.EnvelopeMessage.Equal(that1.EnvelopeMessage) {
		return fmt.Errorf("EnvelopeMessage this(%v) Not Equal that(%v)", this.EnvelopeMessage, that1.EnvelopeMessage)
	}
	if !this.MessageId.Equal(that1.MessageId) {
		return fmt.Errorf("MessageId this(%v) Not Equal that(%v)", this.MessageId, that1.MessageId)
	}
	if !this.PaymentId.Equal(that1.PaymentId) {
		return fmt.Errorf("PaymentId this(%v) Not Equal that(%v)", this.PaymentId, that1.PaymentId)
	}
	if !this.Token.Equal(that1.Token) {
		return fmt.Errorf("Token this(%v) Not Equal that(%v)", this.Token, that1.Token)
	}
	if !this.Recipient.Equal(that1.Recipient) {
		return fmt.Errorf("Recipient this(%v) Not Equal that(%v)", this.Recipient, that1.Recipient)
	}
	if !this.Lock.Equal(that1.Lock) {
		return fmt.Errorf("Lock this(%v) Not Equal that(%v)", this.Lock, that1.Lock)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *LockedTransferBase) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LockedTransferBase)
	if !ok {
		that2, ok := that.(LockedTransferBase)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnvelopeMessage.Equal(that1.EnvelopeMessage) {
		return false
	}
	if !this.MessageId.Equal(that1.MessageId) {
		return false
	}
	if !this.PaymentId.Equal(that1.PaymentId) {
		return false
	}
	if !this.Token.Equal(that1.Token) {
		return false
	}
	if !this.Recipient.Equal(that1.Recipient) {
		return false
	}
	if !this.Lock.Equal(that1.Lock) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LockedTransfer) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*LockedTransfer)
	if !ok {
		that2, ok := that.(LockedTransfer)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *LockedTransfer")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *LockedTransfer but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *LockedTransfer but is not nil && this == nil")
	}
	if !this.BaseMessage.Equal(that1.BaseMessage) {
		return fmt.Errorf("BaseMessage this(%v) Not Equal that(%v)", this.BaseMessage, that1.BaseMessage)
	}
	if !this.Initiator.Equal(that1.Initiator) {
		return fmt.Errorf("Initiator this(%v) Not Equal that(%v)", this.Initiator, that1.Initiator)
	}
	if !this.Target.Equal(that1.Target) {
		return fmt.Errorf("Target this(%v) Not Equal that(%v)", this.Target, that1.Target)
	}
	if !this.EncSecret.Equal(that1.EncSecret) {
		return fmt.Errorf("EncSecret this(%v) Not Equal that(%v)", this.EncSecret, that1.EncSecret)
	}
	if this.Fee != that1.Fee {
		return fmt.Errorf("Fee this(%v) Not Equal that(%v)", this.Fee, that1.Fee)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *LockedTransfer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LockedTransfer)
	if !ok {
		that2, ok := that.(LockedTransfer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BaseMessage.Equal(that1.BaseMessage) {
		return false
	}
	if !this.Initiator.Equal(that1.Initiator) {
		return false
	}
	if !this.Target.Equal(that1.Target) {
		return false
	}
	if !this.EncSecret.Equal(that1.EncSecret) {
		return false
	}
	if this.Fee != that1.Fee {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RefundTransfer) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RefundTransfer)
	if !ok {
		that2, ok := that.(RefundTransfer)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RefundTransfer")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RefundTransfer but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RefundTransfer but is not nil && this == nil")
	}
	if !this.Refund.Equal(that1.Refund) {
		return fmt.Errorf("Refund this(%v) Not Equal that(%v)", this.Refund, that1.Refund)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *RefundTransfer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RefundTransfer)
	if !ok {
		that2, ok := that.(RefundTransfer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Refund.Equal(that1.Refund) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LockExpired) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*LockExpired)
	if !ok {
		that2, ok := that.(LockExpired)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *LockExpired")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *LockExpired but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *LockExpired but is not nil && this == nil")
	}
	if !this.EnvelopeMessage.Equal(that1.EnvelopeMessage) {
		return fmt.Errorf("EnvelopeMessage this(%v) Not Equal that(%v)", this.EnvelopeMessage, that1.EnvelopeMessage)
	}
	if !this.MessageId.Equal(that1.MessageId) {
		return fmt.Errorf("MessageId this(%v) Not Equal that(%v)", this.MessageId, that1.MessageId)
	}
	if !this.Recipient.Equal(that1.Recipient) {
		return fmt.Errorf("Recipient this(%v) Not Equal that(%v)", this.Recipient, that1.Recipient)
	}
	if !this.SecretHash.Equal(that1.SecretHash) {
		return fmt.Errorf("SecretHash this(%v) Not Equal that(%v)", this.SecretHash, that1.SecretHash)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *LockExpired) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LockExpired)
	if !ok {
		that2, ok := that.(LockExpired)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnvelopeMessage.Equal(that1.EnvelopeMessage) {
		return false
	}
	if !this.MessageId.Equal(that1.MessageId) {
		return false
	}
	if !this.Recipient.Equal(that1.Recipient) {
		return false
	}
	if !this.SecretHash.Equal(that1.SecretHash) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *WithdrawRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*WithdrawRequest)
	if !ok {
		that2, ok := that.(WithdrawRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *WithdrawRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *WithdrawRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *WithdrawRequest but is not nil && this == nil")
	}
	if !this.TokenNetworkAddress.Equal(that1.TokenNetworkAddress) {
		return fmt.Errorf("TokenNetworkAddress this(%v) Not Equal that(%v)", this.TokenNetworkAddress, that1.TokenNetworkAddress)
	}
	if !this.MessageId.Equal(that1.MessageId) {
		return fmt.Errorf("MessageId this(%v) Not Equal that(%v)", this.MessageId, that1.MessageId)
	}
	if !this.ChannelId.Equal(that1.ChannelId) {
		return fmt.Errorf("ChannelId this(%v) Not Equal that(%v)", this.ChannelId, that1.ChannelId)
	}
	if !this.Participant.Equal(that1.Participant) {
		return fmt.Errorf("Participant this(%v) Not Equal that(%v)", this.Participant, that1.Participant)
	}
	if !this.WithdrawAmount.Equal(that1.WithdrawAmount) {
		return fmt.Errorf("WithdrawAmount this(%v) Not Equal that(%v)", this.WithdrawAmount, that1.WithdrawAmount)
	}
	if !this.ParticipantSignature.Equal(that1.ParticipantSignature) {
		return fmt.Errorf("ParticipantSignature this(%v) Not Equal that(%v)", this.ParticipantSignature, that1.ParticipantSignature)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *WithdrawRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WithdrawRequest)
	if !ok {
		that2, ok := that.(WithdrawRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TokenNetworkAddress.Equal(that1.TokenNetworkAddress) {
		return false
	}
	if !this.MessageId.Equal(that1.MessageId) {
		return false
	}
	if !this.ChannelId.Equal(that1.ChannelId) {
		return false
	}
	if !this.Participant.Equal(that1.Participant) {
		return false
	}
	if !this.WithdrawAmount.Equal(that1.WithdrawAmount) {
		return false
	}
	if !this.ParticipantSignature.Equal(that1.ParticipantSignature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Withdraw) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Withdraw)
	if !ok {
		that2, ok := that.(Withdraw)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Withdraw")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Withdraw but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Withdraw but is not nil && this == nil")
	}
	if !this.TokenNetworkAddress.Equal(that1.TokenNetworkAddress) {
		return fmt.Errorf("TokenNetworkAddress this(%v) Not Equal that(%v)", this.TokenNetworkAddress, that1.TokenNetworkAddress)
	}
	if !this.MessageId.Equal(that1.MessageId) {
		return fmt.Errorf("MessageId this(%v) Not Equal that(%v)", this.MessageId, that1.MessageId)
	}
	if !this.ChannelId.Equal(that1.ChannelId) {
		return fmt.Errorf("ChannelId this(%v) Not Equal that(%v)", this.ChannelId, that1.ChannelId)
	}
	if !this.Participant.Equal(that1.Participant) {
		return fmt.Errorf("Participant this(%v) Not Equal that(%v)", this.Participant, that1.Participant)
	}
	if !this.WithdrawAmount.Equal(that1.WithdrawAmount) {
		return fmt.Errorf("WithdrawAmount this(%v) Not Equal that(%v)", this.WithdrawAmount, that1.WithdrawAmount)
	}
	if !this.ParticipantSignature.Equal(that1.ParticipantSignature) {
		return fmt.Errorf("ParticipantSignature this(%v) Not Equal that(%v)", this.ParticipantSignature, that1.ParticipantSignature)
	}
	if !this.PartnerSignature.Equal(that1.PartnerSignature) {
		return fmt.Errorf("PartnerSignature this(%v) Not Equal that(%v)", this.PartnerSignature, that1.PartnerSignature)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Withdraw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Withdraw)
	if !ok {
		that2, ok := that.(Withdraw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TokenNetworkAddress.Equal(that1.TokenNetworkAddress) {
		return false
	}
	if !this.MessageId.Equal(that1.MessageId) {
		return false
	}
	if !this.ChannelId.Equal(that1.ChannelId) {
		return false
	}
	if !this.Participant.Equal(that1.Participant) {
		return false
	}
	if !this.WithdrawAmount.Equal(that1.WithdrawAmount) {
		return false
	}
	if !this.ParticipantSignature.Equal(that1.ParticipantSignature) {
		return false
	}
	if !this.PartnerSignature.Equal(that1.PartnerSignature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CooperativeSettleRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CooperativeSettleRequest)
	if !ok {
		that2, ok := that.(CooperativeSettleRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CooperativeSettleRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CooperativeSettleRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CooperativeSettleRequest but is not nil && this == nil")
	}
	if !this.TokenNetworkAddress.Equal(that1.TokenNetworkAddress) {
		return fmt.Errorf("TokenNetworkAddress this(%v) Not Equal that(%v)", this.TokenNetworkAddress, that1.TokenNetworkAddress)
	}
	if !this.MessageId.Equal(that1.MessageId) {
		return fmt.Errorf("MessageId this(%v) Not Equal that(%v)", this.MessageId, that1.MessageId)
	}
	if !this.ChannelId.Equal(that1.ChannelId) {
		return fmt.Errorf("ChannelId this(%v) Not Equal that(%v)", this.ChannelId, that1.ChannelId)
	}
	if !this.Participant1.Equal(that1.Participant1) {
		return fmt.Errorf("Participant1 this(%v) Not Equal that(%v)", this.Participant1, that1.Participant1)
	}
	if !this.Participant1Balance.Equal(that1.Participant1Balance) {
		return fmt.Errorf("Participant1Balance this(%v) Not Equal that(%v)", this.Participant1Balance, that1.Participant1Balance)
	}
	if !this.Participant2.Equal(that1.Participant2) {
		return fmt.Errorf("Participant2 this(%v) Not Equal that(%v)", this.Participant2, that1.Participant2)
	}
	if !this.Participant2Balance.Equal(that1.Participant2Balance) {
		return fmt.Errorf("Participant2Balance this(%v) Not Equal that(%v)", this.Participant2Balance, that1.Participant2Balance)
	}
	if !this.Participant1Signature.Equal(that1.Participant1Signature) {
		return fmt.Errorf("Participant1Signature this(%v) Not Equal that(%v)", this.Participant1Signature, that1.Participant1Signature)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *CooperativeSettleRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CooperativeSettleRequest)
	if !ok {
		that2, ok := that.(CooperativeSettleRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TokenNetworkAddress.Equal(that1.TokenNetworkAddress) {
		return false
	}
	if !this.MessageId.Equal(that1.MessageId) {
		return false
	}
	if !this.ChannelId.Equal(that1.ChannelId) {
		return false
	}
	if !this.Participant1.Equal(that1.Participant1) {
		return false
	}
	if !this.Participant1Balance.Equal(that1.Participant1Balance) {
		return false
	}
	if !this.Participant2.Equal(that1.Participant2) {
		return false
	}
	if !this.Participant2Balance.Equal(that1.Participant2Balance) {
		return false
	}
	if !this.Participant1Signature.Equal(that1.Participant1Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CooperativeSettle) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CooperativeSettle)
	if !ok {
		that2, ok := that.(CooperativeSettle)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CooperativeSettle")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CooperativeSettle but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CooperativeSettle but is not nil && this == nil")
	}
	if !this.TokenNetworkAddress.Equal(that1.TokenNetworkAddress) {
		return fmt.Errorf("TokenNetworkAddress this(%v) Not Equal that(%v)", this.TokenNetworkAddress, that1.TokenNetworkAddress)
	}
	if !this.MessageId.Equal(that1.MessageId) {
		return fmt.Errorf("MessageId this(%v) Not Equal that(%v)", this.MessageId, that1.MessageId)
	}
	if !this.ChannelId.Equal(that1.ChannelId) {
		return fmt.Errorf("ChannelId this(%v) Not Equal that(%v)", this.ChannelId, that1.ChannelId)
	}
	if !this.Participant1.Equal(that1.Participant1) {
		return fmt.Errorf("Participant1 this(%v) Not Equal that(%v)", this.Participant1, that1.Participant1)
	}
	if !this.Participant1Balance.Equal(that1.Participant1Balance) {
		return fmt.Errorf("Participant1Balance this(%v) Not Equal that(%v)", this.Participant1Balance, that1.Participant1Balance)
	}
	if !this.Participant2.Equal(that1.Participant2) {
		return fmt.Errorf("Participant2 this(%v) Not Equal that(%v)", this.Participant2, that1.Participant2)
	}
	if !this.Participant2Balance.Equal(that1.Participant2Balance) {
		return fmt.Errorf("Participant2Balance this(%v) Not Equal that(%v)", this.Participant2Balance, that1.Participant2Balance)
	}
	if !this.Participant1Signature.Equal(that1.Participant1Signature) {
		return fmt.Errorf("Participant1Signature this(%v) Not Equal that(%v)", this.Participant1Signature, that1.Participant1Signature)
	}
	if !this.Participant2Signature.Equal(that1.Participant2Signature) {
		return fmt.Errorf("Participant2Signature this(%v) Not Equal that(%v)", this.Participant2Signature, that1.Participant2Signature)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *CooperativeSettle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CooperativeSettle)
	if !ok {
		that2, ok := that.(CooperativeSettle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TokenNetworkAddress.Equal(that1.TokenNetworkAddress) {
		return false
	}
	if !this.MessageId.Equal(that1.MessageId) {
		return false
	}
	if !this.ChannelId.Equal(that1.ChannelId) {
		return false
	}
	if !this.Participant1.Equal(that1.Participant1) {
		return false
	}
	if !this.Participant1Balance.Equal(that1.Participant1Balance) {
		return false
	}
	if !this.Participant2.Equal(that1.Participant2) {
		return false
	}
	if !this.Participant2Balance.Equal(that1.Participant2Balance) {
		return false
	}
	if !this.Participant1Signature.Equal(that1.Participant1Signature) {
		return false
	}
	if !this.Participant2Signature.Equal(that1.Participant2Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ChainID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&messages.ChainID{")
	s = append(s, "ChainId: "+fmt.Sprintf("%#v", this.ChainId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TokenAmount) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&messages.TokenAmount{")
	s = append(s, "TokenAmount: "+fmt.Sprintf("%#v", this.TokenAmount)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LocksRoot) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&messages.LocksRoot{")
	s = append(s, "LocksRoot: "+fmt.Sprintf("%#v", this.LocksRoot)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChannelID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&messages.ChannelID{")
	s = append(s, "ChannelId: "+fmt.Sprintf("%#v", this.ChannelId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TokenNetworkAddress) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&messages.TokenNetworkAddress{")
	s = append(s, "TokenNetworkAddress: "+fmt.Sprintf("%#v", this.TokenNetworkAddress)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MessageID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&messages.MessageID{")
	s = append(s, "MessageId: "+fmt.Sprintf("%#v", this.MessageId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PaymentID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&messages.PaymentID{")
	s = append(s, "PaymentId: "+fmt.Sprintf("%#v", this.PaymentId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PaymentAmount) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&messages.PaymentAmount{")
	s = append(s, "PaymentAmount: "+fmt.Sprintf("%#v", this.PaymentAmount)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SecretHash) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&messages.SecretHash{")
	s = append(s, "SecretHash: "+fmt.Sprintf("%#v", this.SecretHash)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BlockExpiration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&messages.BlockExpiration{")
	s = append(s, "BlockExpiration: "+fmt.Sprintf("%#v", this.BlockExpiration)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SecretType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&messages.SecretType{")
	s = append(s, "Secret: "+fmt.Sprintf("%#v", this.Secret)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EncSecret) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&messages.EncSecret{")
	s = append(s, "EncSecret: "+fmt.Sprintf("%#v", this.EncSecret)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Address) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&messages.Address{")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HashTimeLock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&messages.HashTimeLock{")
	if this.Amount != nil {
		s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	}
	if this.Expiration != nil {
		s = append(s, "Expiration: "+fmt.Sprintf("%#v", this.Expiration)+",\n")
	}
	if this.SecretHash != nil {
		s = append(s, "SecretHash: "+fmt.Sprintf("%#v", this.SecretHash)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignedMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&messages.SignedMessage{")
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	s = append(s, "Publickey: "+fmt.Sprintf("%#v", this.Publickey)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnvelopeMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&messages.EnvelopeMessage{")
	if this.ChainId != nil {
		s = append(s, "ChainId: "+fmt.Sprintf("%#v", this.ChainId)+",\n")
	}
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	if this.TransferredAmount != nil {
		s = append(s, "TransferredAmount: "+fmt.Sprintf("%#v", this.TransferredAmount)+",\n")
	}
	if this.LockedAmount != nil {
		s = append(s, "LockedAmount: "+fmt.Sprintf("%#v", this.LockedAmount)+",\n")
	}
	if this.LocksRoot != nil {
		s = append(s, "LocksRoot: "+fmt.Sprintf("%#v", this.LocksRoot)+",\n")
	}
	if this.ChannelId != nil {
		s = append(s, "ChannelId: "+fmt.Sprintf("%#v", this.ChannelId)+",\n")
	}
	if this.TokenNetworkAddress != nil {
		s = append(s, "TokenNetworkAddress: "+fmt.Sprintf("%#v", this.TokenNetworkAddress)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Processed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&messages.Processed{")
	if this.MessageId != nil {
		s = append(s, "MessageId: "+fmt.Sprintf("%#v", this.MessageId)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Delivered) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&messages.Delivered{")
	if this.DeliveredMessageId != nil {
		s = append(s, "DeliveredMessageId: "+fmt.Sprintf("%#v", this.DeliveredMessageId)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SecretRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&messages.SecretRequest{")
	if this.MessageId != nil {
		s = append(s, "MessageId: "+fmt.Sprintf("%#v", this.MessageId)+",\n")
	}
	if this.PaymentId != nil {
		s = append(s, "PaymentId: "+fmt.Sprintf("%#v", this.PaymentId)+",\n")
	}
	if this.SecretHash != nil {
		s = append(s, "SecretHash: "+fmt.Sprintf("%#v", this.SecretHash)+",\n")
	}
	if this.Amount != nil {
		s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	}
	if this.Expiration != nil {
		s = append(s, "Expiration: "+fmt.Sprintf("%#v", this.Expiration)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BalanceProof) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&messages.BalanceProof{")
	if this.EnvelopeMessage != nil {
		s = append(s, "EnvelopeMessage: "+fmt.Sprintf("%#v", this.EnvelopeMessage)+",\n")
	}
	if this.MessageId != nil {
		s = append(s, "MessageId: "+fmt.Sprintf("%#v", this.MessageId)+",\n")
	}
	if this.PaymentId != nil {
		s = append(s, "PaymentId: "+fmt.Sprintf("%#v", this.PaymentId)+",\n")
	}
	if this.Secret != nil {
		s = append(s, "Secret: "+fmt.Sprintf("%#v", this.Secret)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RevealSecret) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&messages.RevealSecret{")
	if this.MessageId != nil {
		s = append(s, "MessageId: "+fmt.Sprintf("%#v", this.MessageId)+",\n")
	}
	if this.Secret != nil {
		s = append(s, "Secret: "+fmt.Sprintf("%#v", this.Secret)+",\n")
	}
	if this.Signature != nil {
		s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DirectTransfer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&messages.DirectTransfer{")
	if this.EnvelopeMessage != nil {
		s = append(s, "EnvelopeMessage: "+fmt.Sprintf("%#v", this.EnvelopeMessage)+",\n")
	}
	if this.MessageId != nil {
		s = append(s, "MessageId: "+fmt.Sprintf("%#v", this.MessageId)+",\n")
	}
	if this.PaymentId != nil {
		s = append(s, "PaymentId: "+fmt.Sprintf("%#v", this.PaymentId)+",\n")
	}
	if this.Token != nil {
		s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	}
	if this.Recipient != nil {
		s = append(s, "Recipient: "+fmt.Sprintf("%#v", this.Recipient)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LockedTransferBase) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&messages.LockedTransferBase{")
	if this.EnvelopeMessage != nil {
		s = append(s, "EnvelopeMessage: "+fmt.Sprintf("%#v", this.EnvelopeMessage)+",\n")
	}
	if this.MessageId != nil {
		s = append(s, "MessageId: "+fmt.Sprintf("%#v", this.MessageId)+",\n")
	}
	if this.PaymentId != nil {
		s = append(s, "PaymentId: "+fmt.Sprintf("%#v", this.PaymentId)+",\n")
	}
	if this.Token != nil {
		s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	}
	if this.Recipient != nil {
		s = append(s, "Recipient: "+fmt.Sprintf("%#v", this.Recipient)+",\n")
	}
	if this.Lock != nil {
		s = append(s, "Lock: "+fmt.Sprintf("%#v", this.Lock)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LockedTransfer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&messages.LockedTransfer{")
	if this.BaseMessage != nil {
		s = append(s, "BaseMessage: "+fmt.Sprintf("%#v", this.BaseMessage)+",\n")
	}
	if this.Initiator != nil {
		s = append(s, "Initiator: "+fmt.Sprintf("%#v", this.Initiator)+",\n")
	}
	if this.Target != nil {
		s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	}
	if this.EncSecret != nil {
		s = append(s, "EncSecret: "+fmt.Sprintf("%#v", this.EncSecret)+",\n")
	}
	s = append(s, "Fee: "+fmt.Sprintf("%#v", this.Fee)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RefundTransfer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&messages.RefundTransfer{")
	if this.Refund != nil {
		s = append(s, "Refund: "+fmt.Sprintf("%#v", this.Refund)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LockExpired) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&messages.LockExpired{")
	if this.EnvelopeMessage != nil {
		s = append(s, "EnvelopeMessage: "+fmt.Sprintf("%#v", this.EnvelopeMessage)+",\n")
	}
	if this.MessageId != nil {
		s = append(s, "MessageId: "+fmt.Sprintf("%#v", this.MessageId)+",\n")
	}
	if this.Recipient != nil {
		s = append(s, "Recipient: "+fmt.Sprintf("%#v", this.Recipient)+",\n")
	}
	if this.SecretHash != nil {
		s = append(s, "SecretHash: "+fmt.Sprintf("%#v", this.SecretHash)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WithdrawRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&messages.WithdrawRequest{")
	if this.TokenNetworkAddress != nil {
		s = append(s, "TokenNetworkAddress: "+fmt.Sprintf("%#v", this.TokenNetworkAddress)+",\n")
	}
	if this.MessageId != nil {
		s = append(s, "MessageId: "+fmt.Sprintf("%#v", this.MessageId)+",\n")
	}
	if this.ChannelId != nil {
		s = append(s, "ChannelId: "+fmt.Sprintf("%#v", this.ChannelId)+",\n")
	}
	if this.Participant != nil {
		s = append(s, "Participant: "+fmt.Sprintf("%#v", this.Participant)+",\n")
	}
	if this.WithdrawAmount != nil {
		s = append(s, "WithdrawAmount: "+fmt.Sprintf("%#v", this.WithdrawAmount)+",\n")
	}
	if this.ParticipantSignature != nil {
		s = append(s, "ParticipantSignature: "+fmt.Sprintf("%#v", this.ParticipantSignature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Withdraw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&messages.Withdraw{")
	if this.TokenNetworkAddress != nil {
		s = append(s, "TokenNetworkAddress: "+fmt.Sprintf("%#v", this.TokenNetworkAddress)+",\n")
	}
	if this.MessageId != nil {
		s = append(s, "MessageId: "+fmt.Sprintf("%#v", this.MessageId)+",\n")
	}
	if this.ChannelId != nil {
		s = append(s, "ChannelId: "+fmt.Sprintf("%#v", this.ChannelId)+",\n")
	}
	if this.Participant != nil {
		s = append(s, "Participant: "+fmt.Sprintf("%#v", this.Participant)+",\n")
	}
	if this.WithdrawAmount != nil {
		s = append(s, "WithdrawAmount: "+fmt.Sprintf("%#v", this.WithdrawAmount)+",\n")
	}
	if this.ParticipantSignature != nil {
		s = append(s, "ParticipantSignature: "+fmt.Sprintf("%#v", this.ParticipantSignature)+",\n")
	}
	if this.PartnerSignature != nil {
		s = append(s, "PartnerSignature: "+fmt.Sprintf("%#v", this.PartnerSignature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CooperativeSettleRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&messages.CooperativeSettleRequest{")
	if this.TokenNetworkAddress != nil {
		s = append(s, "TokenNetworkAddress: "+fmt.Sprintf("%#v", this.TokenNetworkAddress)+",\n")
	}
	if this.MessageId != nil {
		s = append(s, "MessageId: "+fmt.Sprintf("%#v", this.MessageId)+",\n")
	}
	if this.ChannelId != nil {
		s = append(s, "ChannelId: "+fmt.Sprintf("%#v", this.ChannelId)+",\n")
	}
	if this.Participant1 != nil {
		s = append(s, "Participant1: "+fmt.Sprintf("%#v", this.Participant1)+",\n")
	}
	if this.Participant1Balance != nil {
		s = append(s, "Participant1Balance: "+fmt.Sprintf("%#v", this.Participant1Balance)+",\n")
	}
	if this.Participant2 != nil {
		s = append(s, "Participant2: "+fmt.Sprintf("%#v", this.Participant2)+",\n")
	}
	if this.Participant2Balance != nil {
		s = append(s, "Participant2Balance: "+fmt.Sprintf("%#v", this.Participant2Balance)+",\n")
	}
	if this.Participant1Signature != nil {
		s = append(s, "Participant1Signature: "+fmt.Sprintf("%#v", this.Participant1Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CooperativeSettle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&messages.CooperativeSettle{")
	if this.TokenNetworkAddress != nil {
		s = append(s, "TokenNetworkAddress: "+fmt.Sprintf("%#v", this.TokenNetworkAddress)+",\n")
	}
	if this.MessageId != nil {
		s = append(s, "MessageId: "+fmt.Sprintf("%#v", this.MessageId)+",\n")
	}
	if this.ChannelId != nil {
		s = append(s, "ChannelId: "+fmt.Sprintf("%#v", this.ChannelId)+",\n")
	}
	if this.Participant1 != nil {
		s = append(s, "Participant1: "+fmt.Sprintf("%#v", this.Participant1)+",\n")
	}
	if this.Participant1Balance != nil {
		s = append(s, "Participant1Balance: "+fmt.Sprintf("%#v", this.Participant1Balance)+",\n")
	}
	if this.Participant2 != nil {
		s = append(s, "Participant2: "+fmt.Sprintf("%#v", this.Participant2)+",\n")
	}
	if this.Participant2Balance != nil {
		s = append(s, "Participant2Balance: "+fmt.Sprintf("%#v", this.Participant2Balance)+",\n")
	}
	if this.Participant1Signature != nil {
		s = append(s, "Participant1Signature: "+fmt.Sprintf("%#v", this.Participant1Signature)+",\n")
	}
	if this.Participant2Signature != nil {
		s = append(s, "Participant2Signature: "+fmt.Sprintf("%#v", this.Participant2Signature)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringStream(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ChainID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.ChainId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TokenAmount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenAmount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TokenAmount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.TokenAmount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LocksRoot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocksRoot) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LocksRoot) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStream(dAtA, i, uint64(len(m.LocksRoot)))
		i += copy(dAtA[i:], m.LocksRoot)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChannelID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.ChannelId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TokenNetworkAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenNetworkAddress) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TokenNetworkAddress) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStream(dAtA, i, uint64(len(m.TokenNetworkAddress)))
		i += copy(dAtA[i:], m.TokenNetworkAddress)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MessageID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MessageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.MessageId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PaymentID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PaymentId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.PaymentId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PaymentAmount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentAmount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PaymentAmount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.PaymentAmount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SecretHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecretHash) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SecretHash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStream(dAtA, i, uint64(len(m.SecretHash)))
		i += copy(dAtA[i:], m.SecretHash)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockExpiration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockExpiration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BlockExpiration != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.BlockExpiration))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SecretType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecretType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Secret) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStream(dAtA, i, uint64(len(m.Secret)))
		i += copy(dAtA[i:], m.Secret)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EncSecret) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncSecret) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EncSecret) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStream(dAtA, i, uint64(len(m.EncSecret)))
		i += copy(dAtA[i:], m.EncSecret)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Address) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Address) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStream(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *HashTimeLock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HashTimeLock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Amount != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Amount.Size()))
		n1, err := m.Amount.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Expiration != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Expiration.Size()))
		n2, err := m.Expiration.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.SecretHash != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.SecretHash.Size()))
		n3, err := m.SecretHash.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SignedMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStream(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	if m.Sender != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Sender.Size()))
		n4, err := m.Sender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Publickey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStream(dAtA, i, uint64(len(m.Publickey)))
		i += copy(dAtA[i:], m.Publickey)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EnvelopeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnvelopeMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChainId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.ChainId.Size()))
		n5, err := m.ChainId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Nonce != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Nonce))
	}
	if m.TransferredAmount != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.TransferredAmount.Size()))
		n6, err := m.TransferredAmount.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.LockedAmount != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.LockedAmount.Size()))
		n7, err := m.LockedAmount.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.LocksRoot != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.LocksRoot.Size()))
		n8, err := m.LocksRoot.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.ChannelId != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.ChannelId.Size()))
		n9, err := m.ChannelId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.TokenNetworkAddress != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.TokenNetworkAddress.Size()))
		n10, err := m.TokenNetworkAddress.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Signature != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Signature.Size()))
		n11, err := m.Signature.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Processed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Processed) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MessageId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.MessageId.Size()))
		n12, err := m.MessageId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.Signature != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Signature.Size()))
		n13, err := m.Signature.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Delivered) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Delivered) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DeliveredMessageId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.DeliveredMessageId.Size()))
		n14, err := m.DeliveredMessageId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.Signature != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Signature.Size()))
		n15, err := m.Signature.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SecretRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecretRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MessageId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.MessageId.Size()))
		n16, err := m.MessageId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.PaymentId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.PaymentId.Size()))
		n17, err := m.PaymentId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.SecretHash != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.SecretHash.Size()))
		n18, err := m.SecretHash.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.Amount != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Amount.Size()))
		n19, err := m.Amount.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.Expiration != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Expiration.Size()))
		n20, err := m.Expiration.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.Signature != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Signature.Size()))
		n21, err := m.Signature.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BalanceProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BalanceProof) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EnvelopeMessage != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.EnvelopeMessage.Size()))
		n22, err := m.EnvelopeMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.MessageId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.MessageId.Size()))
		n23, err := m.MessageId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.PaymentId != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.PaymentId.Size()))
		n24, err := m.PaymentId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.Secret != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Secret.Size()))
		n25, err := m.Secret.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RevealSecret) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RevealSecret) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MessageId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.MessageId.Size()))
		n26, err := m.MessageId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if m.Secret != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Secret.Size()))
		n27, err := m.Secret.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.Signature != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Signature.Size()))
		n28, err := m.Signature.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DirectTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectTransfer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EnvelopeMessage != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.EnvelopeMessage.Size()))
		n29, err := m.EnvelopeMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if m.MessageId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.MessageId.Size()))
		n30, err := m.MessageId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.PaymentId != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.PaymentId.Size()))
		n31, err := m.PaymentId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if m.Token != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Token.Size()))
		n32, err := m.Token.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	if m.Recipient != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Recipient.Size()))
		n33, err := m.Recipient.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LockedTransferBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockedTransferBase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EnvelopeMessage != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.EnvelopeMessage.Size()))
		n34, err := m.EnvelopeMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	if m.MessageId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.MessageId.Size()))
		n35, err := m.MessageId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	if m.PaymentId != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.PaymentId.Size()))
		n36, err := m.PaymentId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	if m.Token != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Token.Size()))
		n37, err := m.Token.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	if m.Recipient != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Recipient.Size()))
		n38, err := m.Recipient.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	if m.Lock != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Lock.Size()))
		n39, err := m.Lock.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LockedTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockedTransfer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BaseMessage != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.BaseMessage.Size()))
		n40, err := m.BaseMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	if m.Initiator != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Initiator.Size()))
		n41, err := m.Initiator.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	if m.Target != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Target.Size()))
		n42, err := m.Target.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	if m.EncSecret != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.EncSecret.Size()))
		n43, err := m.EncSecret.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	if m.Fee != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Fee))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RefundTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefundTransfer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Refund != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Refund.Size()))
		n44, err := m.Refund.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LockExpired) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockExpired) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EnvelopeMessage != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.EnvelopeMessage.Size()))
		n45, err := m.EnvelopeMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	if m.MessageId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.MessageId.Size()))
		n46, err := m.MessageId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	if m.Recipient != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Recipient.Size()))
		n47, err := m.Recipient.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	if m.SecretHash != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.SecretHash.Size()))
		n48, err := m.SecretHash.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WithdrawRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TokenNetworkAddress != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.TokenNetworkAddress.Size()))
		n49, err := m.TokenNetworkAddress.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	if m.MessageId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.MessageId.Size()))
		n50, err := m.MessageId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	if m.ChannelId != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.ChannelId.Size()))
		n51, err := m.ChannelId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n51
	}
	if m.Participant != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Participant.Size()))
		n52, err := m.Participant.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n52
	}
	if m.WithdrawAmount != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.WithdrawAmount.Size()))
		n53, err := m.WithdrawAmount.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n53
	}
	if m.ParticipantSignature != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.ParticipantSignature.Size()))
		n54, err := m.ParticipantSignature.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n54
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Withdraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Withdraw) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TokenNetworkAddress != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.TokenNetworkAddress.Size()))
		n55, err := m.TokenNetworkAddress.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n55
	}
	if m.MessageId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.MessageId.Size()))
		n56, err := m.MessageId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n56
	}
	if m.ChannelId != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.ChannelId.Size()))
		n57, err := m.ChannelId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n57
	}
	if m.Participant != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Participant.Size()))
		n58, err := m.Participant.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n58
	}
	if m.WithdrawAmount != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.WithdrawAmount.Size()))
		n59, err := m.WithdrawAmount.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n59
	}
	if m.ParticipantSignature != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.ParticipantSignature.Size()))
		n60, err := m.ParticipantSignature.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n60
	}
	if m.PartnerSignature != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.PartnerSignature.Size()))
		n61, err := m.PartnerSignature.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n61
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CooperativeSettleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CooperativeSettleRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TokenNetworkAddress != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.TokenNetworkAddress.Size()))
		n62, err := m.TokenNetworkAddress.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n62
	}
	if m.MessageId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.MessageId.Size()))
		n63, err := m.MessageId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n63
	}
	if m.ChannelId != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.ChannelId.Size()))
		n64, err := m.ChannelId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n64
	}
	if m.Participant1 != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Participant1.Size()))
		n65, err := m.Participant1.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n65
	}
	if m.Participant1Balance != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Participant1Balance.Size()))
		n66, err := m.Participant1Balance.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n66
	}
	if m.Participant2 != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Participant2.Size()))
		n67, err := m.Participant2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n67
	}
	if m.Participant2Balance != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Participant2Balance.Size()))
		n68, err := m.Participant2Balance.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n68
	}
	if m.Participant1Signature != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Participant1Signature.Size()))
		n69, err := m.Participant1Signature.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n69
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CooperativeSettle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CooperativeSettle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TokenNetworkAddress != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.TokenNetworkAddress.Size()))
		n70, err := m.TokenNetworkAddress.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n70
	}
	if m.MessageId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.MessageId.Size()))
		n71, err := m.MessageId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n71
	}
	if m.ChannelId != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.ChannelId.Size()))
		n72, err := m.ChannelId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n72
	}
	if m.Participant1 != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Participant1.Size()))
		n73, err := m.Participant1.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n73
	}
	if m.Participant1Balance != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Participant1Balance.Size()))
		n74, err := m.Participant1Balance.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n74
	}
	if m.Participant2 != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Participant2.Size()))
		n75, err := m.Participant2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n75
	}
	if m.Participant2Balance != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Participant2Balance.Size()))
		n76, err := m.Participant2Balance.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n76
	}
	if m.Participant1Signature != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Participant1Signature.Size()))
		n77, err := m.Participant1Signature.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n77
	}
	if m.Participant2Signature != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Participant2Signature.Size()))
		n78, err := m.Participant2Signature.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n78
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintStream(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ChainID) Size() (n int) {
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovStream(uint64(m.ChainId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TokenAmount) Size() (n int) {
	var l int
	_ = l
	if m.TokenAmount != 0 {
		n += 1 + sovStream(uint64(m.TokenAmount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LocksRoot) Size() (n int) {
	var l int
	_ = l
	l = len(m.LocksRoot)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelID) Size() (n int) {
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovStream(uint64(m.ChannelId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TokenNetworkAddress) Size() (n int) {
	var l int
	_ = l
	l = len(m.TokenNetworkAddress)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MessageID) Size() (n int) {
	var l int
	_ = l
	if m.MessageId != 0 {
		n += 1 + sovStream(uint64(m.MessageId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PaymentID) Size() (n int) {
	var l int
	_ = l
	if m.PaymentId != 0 {
		n += 1 + sovStream(uint64(m.PaymentId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PaymentAmount) Size() (n int) {
	var l int
	_ = l
	if m.PaymentAmount != 0 {
		n += 1 + sovStream(uint64(m.PaymentAmount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SecretHash) Size() (n int) {
	var l int
	_ = l
	l = len(m.SecretHash)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockExpiration) Size() (n int) {
	var l int
	_ = l
	if m.BlockExpiration != 0 {
		n += 1 + sovStream(uint64(m.BlockExpiration))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SecretType) Size() (n int) {
	var l int
	_ = l
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EncSecret) Size() (n int) {
	var l int
	_ = l
	l = len(m.EncSecret)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Address) Size() (n int) {
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HashTimeLock) Size() (n int) {
	var l int
	_ = l
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Expiration != nil {
		l = m.Expiration.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.SecretHash != nil {
		l = m.SecretHash.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.Publickey)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EnvelopeMessage) Size() (n int) {
	var l int
	_ = l
	if m.ChainId != nil {
		l = m.ChainId.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovStream(uint64(m.Nonce))
	}
	if m.TransferredAmount != nil {
		l = m.TransferredAmount.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.LockedAmount != nil {
		l = m.LockedAmount.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.LocksRoot != nil {
		l = m.LocksRoot.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.ChannelId != nil {
		l = m.ChannelId.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.TokenNetworkAddress != nil {
		l = m.TokenNetworkAddress.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Processed) Size() (n int) {
	var l int
	_ = l
	if m.MessageId != nil {
		l = m.MessageId.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Delivered) Size() (n int) {
	var l int
	_ = l
	if m.DeliveredMessageId != nil {
		l = m.DeliveredMessageId.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SecretRequest) Size() (n int) {
	var l int
	_ = l
	if m.MessageId != nil {
		l = m.MessageId.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.PaymentId != nil {
		l = m.PaymentId.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.SecretHash != nil {
		l = m.SecretHash.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Expiration != nil {
		l = m.Expiration.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BalanceProof) Size() (n int) {
	var l int
	_ = l
	if m.EnvelopeMessage != nil {
		l = m.EnvelopeMessage.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.MessageId != nil {
		l = m.MessageId.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.PaymentId != nil {
		l = m.PaymentId.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Secret != nil {
		l = m.Secret.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RevealSecret) Size() (n int) {
	var l int
	_ = l
	if m.MessageId != nil {
		l = m.MessageId.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Secret != nil {
		l = m.Secret.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DirectTransfer) Size() (n int) {
	var l int
	_ = l
	if m.EnvelopeMessage != nil {
		l = m.EnvelopeMessage.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.MessageId != nil {
		l = m.MessageId.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.PaymentId != nil {
		l = m.PaymentId.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Recipient != nil {
		l = m.Recipient.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LockedTransferBase) Size() (n int) {
	var l int
	_ = l
	if m.EnvelopeMessage != nil {
		l = m.EnvelopeMessage.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.MessageId != nil {
		l = m.MessageId.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.PaymentId != nil {
		l = m.PaymentId.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Recipient != nil {
		l = m.Recipient.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Lock != nil {
		l = m.Lock.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LockedTransfer) Size() (n int) {
	var l int
	_ = l
	if m.BaseMessage != nil {
		l = m.BaseMessage.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Initiator != nil {
		l = m.Initiator.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.EncSecret != nil {
		l = m.EncSecret.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Fee != 0 {
		n += 1 + sovStream(uint64(m.Fee))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RefundTransfer) Size() (n int) {
	var l int
	_ = l
	if m.Refund != nil {
		l = m.Refund.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LockExpired) Size() (n int) {
	var l int
	_ = l
	if m.EnvelopeMessage != nil {
		l = m.EnvelopeMessage.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.MessageId != nil {
		l = m.MessageId.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Recipient != nil {
		l = m.Recipient.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.SecretHash != nil {
		l = m.SecretHash.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WithdrawRequest) Size() (n int) {
	var l int
	_ = l
	if m.TokenNetworkAddress != nil {
		l = m.TokenNetworkAddress.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.MessageId != nil {
		l = m.MessageId.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.ChannelId != nil {
		l = m.ChannelId.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Participant != nil {
		l = m.Participant.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.WithdrawAmount != nil {
		l = m.WithdrawAmount.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.ParticipantSignature != nil {
		l = m.ParticipantSignature.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Withdraw) Size() (n int) {
	var l int
	_ = l
	if m.TokenNetworkAddress != nil {
		l = m.TokenNetworkAddress.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.MessageId != nil {
		l = m.MessageId.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.ChannelId != nil {
		l = m.ChannelId.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Participant != nil {
		l = m.Participant.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.WithdrawAmount != nil {
		l = m.WithdrawAmount.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.ParticipantSignature != nil {
		l = m.ParticipantSignature.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.PartnerSignature != nil {
		l = m.PartnerSignature.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CooperativeSettleRequest) Size() (n int) {
	var l int
	_ = l
	if m.TokenNetworkAddress != nil {
		l = m.TokenNetworkAddress.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.MessageId != nil {
		l = m.MessageId.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.ChannelId != nil {
		l = m.ChannelId.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Participant1 != nil {
		l = m.Participant1.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Participant1Balance != nil {
		l = m.Participant1Balance.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Participant2 != nil {
		l = m.Participant2.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Participant2Balance != nil {
		l = m.Participant2Balance.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Participant1Signature != nil {
		l = m.Participant1Signature.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CooperativeSettle) Size() (n int) {
	var l int
	_ = l
	if m.TokenNetworkAddress != nil {
		l = m.TokenNetworkAddress.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.MessageId != nil {
		l = m.MessageId.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.ChannelId != nil {
		l = m.ChannelId.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Participant1 != nil {
		l = m.Participant1.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Participant1Balance != nil {
		l = m.Participant1Balance.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Participant2 != nil {
		l = m.Participant2.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Participant2Balance != nil {
		l = m.Participant2Balance.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Participant1Signature != nil {
		l = m.Participant1Signature.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Participant2Signature != nil {
		l = m.Participant2Signature.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovStream(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozStream(x uint64) (n int) {
	return sovStream(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ChainID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChainID{`,
		`ChainId:` + fmt.Sprintf("%v", this.ChainId) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TokenAmount) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TokenAmount{`,
		`TokenAmount:` + fmt.Sprintf("%v", this.TokenAmount) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LocksRoot) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LocksRoot{`,
		`LocksRoot:` + fmt.Sprintf("%v", this.LocksRoot) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChannelID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChannelID{`,
		`ChannelId:` + fmt.Sprintf("%v", this.ChannelId) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TokenNetworkAddress) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TokenNetworkAddress{`,
		`TokenNetworkAddress:` + fmt.Sprintf("%v", this.TokenNetworkAddress) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageID{`,
		`MessageId:` + fmt.Sprintf("%v", this.MessageId) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PaymentID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PaymentID{`,
		`PaymentId:` + fmt.Sprintf("%v", this.PaymentId) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PaymentAmount) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PaymentAmount{`,
		`PaymentAmount:` + fmt.Sprintf("%v", this.PaymentAmount) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecretHash) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecretHash{`,
		`SecretHash:` + fmt.Sprintf("%v", this.SecretHash) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BlockExpiration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BlockExpiration{`,
		`BlockExpiration:` + fmt.Sprintf("%v", this.BlockExpiration) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecretType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecretType{`,
		`Secret:` + fmt.Sprintf("%v", this.Secret) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EncSecret) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EncSecret{`,
		`EncSecret:` + fmt.Sprintf("%v", this.EncSecret) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Address) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Address{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HashTimeLock) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HashTimeLock{`,
		`Amount:` + strings.Replace(fmt.Sprintf("%v", this.Amount), "PaymentAmount", "PaymentAmount", 1) + `,`,
		`Expiration:` + strings.Replace(fmt.Sprintf("%v", this.Expiration), "BlockExpiration", "BlockExpiration", 1) + `,`,
		`SecretHash:` + strings.Replace(fmt.Sprintf("%v", this.SecretHash), "SecretHash", "SecretHash", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignedMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignedMessage{`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`Sender:` + strings.Replace(fmt.Sprintf("%v", this.Sender), "Address", "Address", 1) + `,`,
		`Publickey:` + fmt.Sprintf("%v", this.Publickey) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnvelopeMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnvelopeMessage{`,
		`ChainId:` + strings.Replace(fmt.Sprintf("%v", this.ChainId), "ChainID", "ChainID", 1) + `,`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`TransferredAmount:` + strings.Replace(fmt.Sprintf("%v", this.TransferredAmount), "TokenAmount", "TokenAmount", 1) + `,`,
		`LockedAmount:` + strings.Replace(fmt.Sprintf("%v", this.LockedAmount), "TokenAmount", "TokenAmount", 1) + `,`,
		`LocksRoot:` + strings.Replace(fmt.Sprintf("%v", this.LocksRoot), "LocksRoot", "LocksRoot", 1) + `,`,
		`ChannelId:` + strings.Replace(fmt.Sprintf("%v", this.ChannelId), "ChannelID", "ChannelID", 1) + `,`,
		`TokenNetworkAddress:` + strings.Replace(fmt.Sprintf("%v", this.TokenNetworkAddress), "TokenNetworkAddress", "TokenNetworkAddress", 1) + `,`,
		`Signature:` + strings.Replace(fmt.Sprintf("%v", this.Signature), "SignedMessage", "SignedMessage", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Processed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Processed{`,
		`MessageId:` + strings.Replace(fmt.Sprintf("%v", this.MessageId), "MessageID", "MessageID", 1) + `,`,
		`Signature:` + strings.Replace(fmt.Sprintf("%v", this.Signature), "SignedMessage", "SignedMessage", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Delivered) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Delivered{`,
		`DeliveredMessageId:` + strings.Replace(fmt.Sprintf("%v", this.DeliveredMessageId), "MessageID", "MessageID", 1) + `,`,
		`Signature:` + strings.Replace(fmt.Sprintf("%v", this.Signature), "SignedMessage", "SignedMessage", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecretRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecretRequest{`,
		`MessageId:` + strings.Replace(fmt.Sprintf("%v", this.MessageId), "MessageID", "MessageID", 1) + `,`,
		`PaymentId:` + strings.Replace(fmt.Sprintf("%v", this.PaymentId), "PaymentID", "PaymentID", 1) + `,`,
		`SecretHash:` + strings.Replace(fmt.Sprintf("%v", this.SecretHash), "SecretHash", "SecretHash", 1) + `,`,
		`Amount:` + strings.Replace(fmt.Sprintf("%v", this.Amount), "TokenAmount", "TokenAmount", 1) + `,`,
		`Expiration:` + strings.Replace(fmt.Sprintf("%v", this.Expiration), "BlockExpiration", "BlockExpiration", 1) + `,`,
		`Signature:` + strings.Replace(fmt.Sprintf("%v", this.Signature), "SignedMessage", "SignedMessage", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BalanceProof) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BalanceProof{`,
		`EnvelopeMessage:` + strings.Replace(fmt.Sprintf("%v", this.EnvelopeMessage), "EnvelopeMessage", "EnvelopeMessage", 1) + `,`,
		`MessageId:` + strings.Replace(fmt.Sprintf("%v", this.MessageId), "MessageID", "MessageID", 1) + `,`,
		`PaymentId:` + strings.Replace(fmt.Sprintf("%v", this.PaymentId), "PaymentID", "PaymentID", 1) + `,`,
		`Secret:` + strings.Replace(fmt.Sprintf("%v", this.Secret), "SecretType", "SecretType", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RevealSecret) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RevealSecret{`,
		`MessageId:` + strings.Replace(fmt.Sprintf("%v", this.MessageId), "MessageID", "MessageID", 1) + `,`,
		`Secret:` + strings.Replace(fmt.Sprintf("%v", this.Secret), "SecretType", "SecretType", 1) + `,`,
		`Signature:` + strings.Replace(fmt.Sprintf("%v", this.Signature), "SignedMessage", "SignedMessage", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DirectTransfer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DirectTransfer{`,
		`EnvelopeMessage:` + strings.Replace(fmt.Sprintf("%v", this.EnvelopeMessage), "EnvelopeMessage", "EnvelopeMessage", 1) + `,`,
		`MessageId:` + strings.Replace(fmt.Sprintf("%v", this.MessageId), "MessageID", "MessageID", 1) + `,`,
		`PaymentId:` + strings.Replace(fmt.Sprintf("%v", this.PaymentId), "PaymentID", "PaymentID", 1) + `,`,
		`Token:` + strings.Replace(fmt.Sprintf("%v", this.Token), "Address", "Address", 1) + `,`,
		`Recipient:` + strings.Replace(fmt.Sprintf("%v", this.Recipient), "Address", "Address", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LockedTransferBase) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LockedTransferBase{`,
		`EnvelopeMessage:` + strings.Replace(fmt.Sprintf("%v", this.EnvelopeMessage), "EnvelopeMessage", "EnvelopeMessage", 1) + `,`,
		`MessageId:` + strings.Replace(fmt.Sprintf("%v", this.MessageId), "MessageID", "MessageID", 1) + `,`,
		`PaymentId:` + strings.Replace(fmt.Sprintf("%v", this.PaymentId), "PaymentID", "PaymentID", 1) + `,`,
		`Token:` + strings.Replace(fmt.Sprintf("%v", this.Token), "Address", "Address", 1) + `,`,
		`Recipient:` + strings.Replace(fmt.Sprintf("%v", this.Recipient), "Address", "Address", 1) + `,`,
		`Lock:` + strings.Replace(fmt.Sprintf("%v", this.Lock), "HashTimeLock", "HashTimeLock", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LockedTransfer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LockedTransfer{`,
		`BaseMessage:` + strings.Replace(fmt.Sprintf("%v", this.BaseMessage), "LockedTransferBase", "LockedTransferBase", 1) + `,`,
		`Initiator:` + strings.Replace(fmt.Sprintf("%v", this.Initiator), "Address", "Address", 1) + `,`,
		`Target:` + strings.Replace(fmt.Sprintf("%v", this.Target), "Address", "Address", 1) + `,`,
		`EncSecret:` + strings.Replace(fmt.Sprintf("%v", this.EncSecret), "EncSecret", "EncSecret", 1) + `,`,
		`Fee:` + fmt.Sprintf("%v", this.Fee) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RefundTransfer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RefundTransfer{`,
		`Refund:` + strings.Replace(fmt.Sprintf("%v", this.Refund), "LockedTransfer", "LockedTransfer", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LockExpired) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LockExpired{`,
		`EnvelopeMessage:` + strings.Replace(fmt.Sprintf("%v", this.EnvelopeMessage), "EnvelopeMessage", "EnvelopeMessage", 1) + `,`,
		`MessageId:` + strings.Replace(fmt.Sprintf("%v", this.MessageId), "MessageID", "MessageID", 1) + `,`,
		`Recipient:` + strings.Replace(fmt.Sprintf("%v", this.Recipient), "Address", "Address", 1) + `,`,
		`SecretHash:` + strings.Replace(fmt.Sprintf("%v", this.SecretHash), "SecretHash", "SecretHash", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WithdrawRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WithdrawRequest{`,
		`TokenNetworkAddress:` + strings.Replace(fmt.Sprintf("%v", this.TokenNetworkAddress), "TokenNetworkAddress", "TokenNetworkAddress", 1) + `,`,
		`MessageId:` + strings.Replace(fmt.Sprintf("%v", this.MessageId), "MessageID", "MessageID", 1) + `,`,
		`ChannelId:` + strings.Replace(fmt.Sprintf("%v", this.ChannelId), "ChannelID", "ChannelID", 1) + `,`,
		`Participant:` + strings.Replace(fmt.Sprintf("%v", this.Participant), "Address", "Address", 1) + `,`,
		`WithdrawAmount:` + strings.Replace(fmt.Sprintf("%v", this.WithdrawAmount), "TokenAmount", "TokenAmount", 1) + `,`,
		`ParticipantSignature:` + strings.Replace(fmt.Sprintf("%v", this.ParticipantSignature), "SignedMessage", "SignedMessage", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Withdraw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Withdraw{`,
		`TokenNetworkAddress:` + strings.Replace(fmt.Sprintf("%v", this.TokenNetworkAddress), "TokenNetworkAddress", "TokenNetworkAddress", 1) + `,`,
		`MessageId:` + strings.Replace(fmt.Sprintf("%v", this.MessageId), "MessageID", "MessageID", 1) + `,`,
		`ChannelId:` + strings.Replace(fmt.Sprintf("%v", this.ChannelId), "ChannelID", "ChannelID", 1) + `,`,
		`Participant:` + strings.Replace(fmt.Sprintf("%v", this.Participant), "Address", "Address", 1) + `,`,
		`WithdrawAmount:` + strings.Replace(fmt.Sprintf("%v", this.WithdrawAmount), "TokenAmount", "TokenAmount", 1) + `,`,
		`ParticipantSignature:` + strings.Replace(fmt.Sprintf("%v", this.ParticipantSignature), "SignedMessage", "SignedMessage", 1) + `,`,
		`PartnerSignature:` + strings.Replace(fmt.Sprintf("%v", this.PartnerSignature), "SignedMessage", "SignedMessage", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CooperativeSettleRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CooperativeSettleRequest{`,
		`TokenNetworkAddress:` + strings.Replace(fmt.Sprintf("%v", this.TokenNetworkAddress), "TokenNetworkAddress", "TokenNetworkAddress", 1) + `,`,
		`MessageId:` + strings.Replace(fmt.Sprintf("%v", this.MessageId), "MessageID", "MessageID", 1) + `,`,
		`ChannelId:` + strings.Replace(fmt.Sprintf("%v", this.ChannelId), "ChannelID", "ChannelID", 1) + `,`,
		`Participant1:` + strings.Replace(fmt.Sprintf("%v", this.Participant1), "Address", "Address", 1) + `,`,
		`Participant1Balance:` + strings.Replace(fmt.Sprintf("%v", this.Participant1Balance), "TokenAmount", "TokenAmount", 1) + `,`,
		`Participant2:` + strings.Replace(fmt.Sprintf("%v", this.Participant2), "Address", "Address", 1) + `,`,
		`Participant2Balance:` + strings.Replace(fmt.Sprintf("%v", this.Participant2Balance), "TokenAmount", "TokenAmount", 1) + `,`,
		`Participant1Signature:` + strings.Replace(fmt.Sprintf("%v", this.Participant1Signature), "SignedMessage", "SignedMessage", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CooperativeSettle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CooperativeSettle{`,
		`TokenNetworkAddress:` + strings.Replace(fmt.Sprintf("%v", this.TokenNetworkAddress), "TokenNetworkAddress", "TokenNetworkAddress", 1) + `,`,
		`MessageId:` + strings.Replace(fmt.Sprintf("%v", this.MessageId), "MessageID", "MessageID", 1) + `,`,
		`ChannelId:` + strings.Replace(fmt.Sprintf("%v", this.ChannelId), "ChannelID", "ChannelID", 1) + `,`,
		`Participant1:` + strings.Replace(fmt.Sprintf("%v", this.Participant1), "Address", "Address", 1) + `,`,
		`Participant1Balance:` + strings.Replace(fmt.Sprintf("%v", this.Participant1Balance), "TokenAmount", "TokenAmount", 1) + `,`,
		`Participant2:` + strings.Replace(fmt.Sprintf("%v", this.Participant2), "Address", "Address", 1) + `,`,
		`Participant2Balance:` + strings.Replace(fmt.Sprintf("%v", this.Participant2Balance), "TokenAmount", "TokenAmount", 1) + `,`,
		`Participant1Signature:` + strings.Replace(fmt.Sprintf("%v", this.Participant1Signature), "SignedMessage", "SignedMessage", 1) + `,`,
		`Participant2Signature:` + strings.Replace(fmt.Sprintf("%v", this.Participant2Signature), "SignedMessage", "SignedMessage", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringStream(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ChainID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenAmount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenAmount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenAmount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAmount", wireType)
			}
			m.TokenAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenAmount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocksRoot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocksRoot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocksRoot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocksRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocksRoot = append(m.LocksRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.LocksRoot == nil {
				m.LocksRoot = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenNetworkAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenNetworkAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenNetworkAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenNetworkAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenNetworkAddress = append(m.TokenNetworkAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.TokenNetworkAddress == nil {
				m.TokenNetworkAddress = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentId", wireType)
			}
			m.PaymentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentAmount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentAmount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentAmount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAmount", wireType)
			}
			m.PaymentAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentAmount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecretHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecretHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecretHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecretHash = append(m.SecretHash[:0], dAtA[iNdEx:postIndex]...)
			if m.SecretHash == nil {
				m.SecretHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockExpiration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockExpiration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockExpiration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockExpiration", wireType)
			}
			m.BlockExpiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockExpiration |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecretType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecretType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecretType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = append(m.Secret[:0], dAtA[iNdEx:postIndex]...)
			if m.Secret == nil {
				m.Secret = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EncSecret) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncSecret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncSecret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncSecret", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncSecret = append(m.EncSecret[:0], dAtA[iNdEx:postIndex]...)
			if m.EncSecret == nil {
				m.EncSecret = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Address) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Address: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Address: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HashTimeLock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HashTimeLock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HashTimeLock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &PaymentAmount{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expiration == nil {
				m.Expiration = &BlockExpiration{}
			}
			if err := m.Expiration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecretHash == nil {
				m.SecretHash = &SecretHash{}
			}
			if err := m.SecretHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &Address{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Publickey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Publickey = append(m.Publickey[:0], dAtA[iNdEx:postIndex]...)
			if m.Publickey == nil {
				m.Publickey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnvelopeMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnvelopeMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnvelopeMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChainId == nil {
				m.ChainId = &ChainID{}
			}
			if err := m.ChainId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferredAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransferredAmount == nil {
				m.TransferredAmount = &TokenAmount{}
			}
			if err := m.TransferredAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LockedAmount == nil {
				m.LockedAmount = &TokenAmount{}
			}
			if err := m.LockedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocksRoot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocksRoot == nil {
				m.LocksRoot = &LocksRoot{}
			}
			if err := m.LocksRoot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelId == nil {
				m.ChannelId = &ChannelID{}
			}
			if err := m.ChannelId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenNetworkAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenNetworkAddress == nil {
				m.TokenNetworkAddress = &TokenNetworkAddress{}
			}
			if err := m.TokenNetworkAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &SignedMessage{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Processed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Processed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Processed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MessageId == nil {
				m.MessageId = &MessageID{}
			}
			if err := m.MessageId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &SignedMessage{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Delivered) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Delivered: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Delivered: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveredMessageId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeliveredMessageId == nil {
				m.DeliveredMessageId = &MessageID{}
			}
			if err := m.DeliveredMessageId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &SignedMessage{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecretRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecretRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecretRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MessageId == nil {
				m.MessageId = &MessageID{}
			}
			if err := m.MessageId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaymentId == nil {
				m.PaymentId = &PaymentID{}
			}
			if err := m.PaymentId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecretHash == nil {
				m.SecretHash = &SecretHash{}
			}
			if err := m.SecretHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &TokenAmount{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expiration == nil {
				m.Expiration = &BlockExpiration{}
			}
			if err := m.Expiration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &SignedMessage{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BalanceProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalanceProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalanceProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvelopeMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnvelopeMessage == nil {
				m.EnvelopeMessage = &EnvelopeMessage{}
			}
			if err := m.EnvelopeMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MessageId == nil {
				m.MessageId = &MessageID{}
			}
			if err := m.MessageId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaymentId == nil {
				m.PaymentId = &PaymentID{}
			}
			if err := m.PaymentId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Secret == nil {
				m.Secret = &SecretType{}
			}
			if err := m.Secret.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RevealSecret) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RevealSecret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RevealSecret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MessageId == nil {
				m.MessageId = &MessageID{}
			}
			if err := m.MessageId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Secret == nil {
				m.Secret = &SecretType{}
			}
			if err := m.Secret.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &SignedMessage{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvelopeMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnvelopeMessage == nil {
				m.EnvelopeMessage = &EnvelopeMessage{}
			}
			if err := m.EnvelopeMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MessageId == nil {
				m.MessageId = &MessageID{}
			}
			if err := m.MessageId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaymentId == nil {
				m.PaymentId = &PaymentID{}
			}
			if err := m.PaymentId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &Address{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Recipient == nil {
				m.Recipient = &Address{}
			}
			if err := m.Recipient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockedTransferBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockedTransferBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockedTransferBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvelopeMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnvelopeMessage == nil {
				m.EnvelopeMessage = &EnvelopeMessage{}
			}
			if err := m.EnvelopeMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MessageId == nil {
				m.MessageId = &MessageID{}
			}
			if err := m.MessageId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaymentId == nil {
				m.PaymentId = &PaymentID{}
			}
			if err := m.PaymentId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &Address{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Recipient == nil {
				m.Recipient = &Address{}
			}
			if err := m.Recipient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lock == nil {
				m.Lock = &HashTimeLock{}
			}
			if err := m.Lock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockedTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockedTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockedTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseMessage == nil {
				m.BaseMessage = &LockedTransferBase{}
			}
			if err := m.BaseMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initiator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Initiator == nil {
				m.Initiator = &Address{}
			}
			if err := m.Initiator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &Address{}
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncSecret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EncSecret == nil {
				m.EncSecret = &EncSecret{}
			}
			if err := m.EncSecret.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			m.Fee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fee |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefundTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefundTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefundTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refund", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Refund == nil {
				m.Refund = &LockedTransfer{}
			}
			if err := m.Refund.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockExpired) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockExpired: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockExpired: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvelopeMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnvelopeMessage == nil {
				m.EnvelopeMessage = &EnvelopeMessage{}
			}
			if err := m.EnvelopeMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MessageId == nil {
				m.MessageId = &MessageID{}
			}
			if err := m.MessageId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Recipient == nil {
				m.Recipient = &Address{}
			}
			if err := m.Recipient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecretHash == nil {
				m.SecretHash = &SecretHash{}
			}
			if err := m.SecretHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenNetworkAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenNetworkAddress == nil {
				m.TokenNetworkAddress = &TokenNetworkAddress{}
			}
			if err := m.TokenNetworkAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MessageId == nil {
				m.MessageId = &MessageID{}
			}
			if err := m.MessageId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelId == nil {
				m.ChannelId = &ChannelID{}
			}
			if err := m.ChannelId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Participant == nil {
				m.Participant = &Address{}
			}
			if err := m.Participant.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WithdrawAmount == nil {
				m.WithdrawAmount = &TokenAmount{}
			}
			if err := m.WithdrawAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantSignature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ParticipantSignature == nil {
				m.ParticipantSignature = &SignedMessage{}
			}
			if err := m.ParticipantSignature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Withdraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Withdraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Withdraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenNetworkAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenNetworkAddress == nil {
				m.TokenNetworkAddress = &TokenNetworkAddress{}
			}
			if err := m.TokenNetworkAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MessageId == nil {
				m.MessageId = &MessageID{}
			}
			if err := m.MessageId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelId == nil {
				m.ChannelId = &ChannelID{}
			}
			if err := m.ChannelId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Participant == nil {
				m.Participant = &Address{}
			}
			if err := m.Participant.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WithdrawAmount == nil {
				m.WithdrawAmount = &TokenAmount{}
			}
			if err := m.WithdrawAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantSignature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ParticipantSignature == nil {
				m.ParticipantSignature = &SignedMessage{}
			}
			if err := m.ParticipantSignature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerSignature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PartnerSignature == nil {
				m.PartnerSignature = &SignedMessage{}
			}
			if err := m.PartnerSignature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CooperativeSettleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CooperativeSettleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CooperativeSettleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenNetworkAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenNetworkAddress == nil {
				m.TokenNetworkAddress = &TokenNetworkAddress{}
			}
			if err := m.TokenNetworkAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MessageId == nil {
				m.MessageId = &MessageID{}
			}
			if err := m.MessageId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelId == nil {
				m.ChannelId = &ChannelID{}
			}
			if err := m.ChannelId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Participant1 == nil {
				m.Participant1 = &Address{}
			}
			if err := m.Participant1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant1Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Participant1Balance == nil {
				m.Participant1Balance = &TokenAmount{}
			}
			if err := m.Participant1Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Participant2 == nil {
				m.Participant2 = &Address{}
			}
			if err := m.Participant2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant2Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Participant2Balance == nil {
				m.Participant2Balance = &TokenAmount{}
			}
			if err := m.Participant2Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant1Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Participant1Signature == nil {
				m.Participant1Signature = &SignedMessage{}
			}
			if err := m.Participant1Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CooperativeSettle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CooperativeSettle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CooperativeSettle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenNetworkAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenNetworkAddress == nil {
				m.TokenNetworkAddress = &TokenNetworkAddress{}
			}
			if err := m.TokenNetworkAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MessageId == nil {
				m.MessageId = &MessageID{}
			}
			if err := m.MessageId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelId == nil {
				m.ChannelId = &ChannelID{}
			}
			if err := m.ChannelId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Participant1 == nil {
				m.Participant1 = &Address{}
			}
			if err := m.Participant1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant1Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Participant1Balance == nil {
				m.Participant1Balance = &TokenAmount{}
			}
			if err := m.Participant1Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Participant2 == nil {
				m.Participant2 = &Address{}
			}
			if err := m.Participant2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant2Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Participant2Balance == nil {
				m.Participant2Balance = &TokenAmount{}
			}
			if err := m.Participant2Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant1Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Participant1Signature == nil {
				m.Participant1Signature = &SignedMessage{}
			}
			if err := m.Participant1Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant2Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Participant2Signature == nil {
				m.Participant2Signature = &SignedMessage{}
			}
			if err := m.Participant2Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStream(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStream
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthStream
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStream
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStream(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStream = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStream   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("stream.proto", fileDescriptor_stream_99ad9bcf0115d5db) }

var fileDescriptor_stream_99ad9bcf0115d5db = []byte{
	// 1270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xef, 0xda, 0x8e, 0x1d, 0x3f, 0xdb, 0x71, 0x32, 0xf9, 0x43, 0x8a, 0x5a, 0x03, 0x4b, 0x10,
	0xb4, 0x6a, 0x93, 0xc6, 0x55, 0x90, 0x40, 0x08, 0xd4, 0xc4, 0x91, 0x6a, 0x29, 0xad, 0xd2, 0x4d,
	0x24, 0x8e, 0xd6, 0x7a, 0xf7, 0xc5, 0x5e, 0xc5, 0xd9, 0x35, 0xbb, 0x63, 0x87, 0xdc, 0xb8, 0x72,
	0xe2, 0xda, 0x6f, 0x50, 0xae, 0x7c, 0x8b, 0x72, 0x01, 0x8e, 0x1c, 0x9b, 0x70, 0xe3, 0x42, 0x25,
	0xbe, 0x00, 0x9a, 0xdd, 0x99, 0xdd, 0x99, 0xad, 0xe3, 0x1a, 0x73, 0xa8, 0xa8, 0x72, 0xf3, 0xcc,
	0xfe, 0xde, 0xbc, 0x37, 0xbf, 0xf7, 0xe6, 0xf7, 0x5e, 0x02, 0xe5, 0x80, 0xfa, 0x68, 0x9e, 0xac,
	0xf7, 0x7d, 0x8f, 0x7a, 0x64, 0xf6, 0x04, 0x83, 0xc0, 0xec, 0x60, 0xf0, 0xae, 0xde, 0xf1, 0x3a,
	0xde, 0x46, 0xb8, 0xdb, 0x1e, 0x1c, 0x6d, 0xb0, 0x55, 0xb8, 0x08, 0x7f, 0x45, 0x68, 0x7d, 0x0d,
	0x0a, 0x3b, 0x5d, 0xd3, 0x71, 0x9b, 0x0d, 0x72, 0x1d, 0x66, 0x2d, 0xf6, 0xb3, 0xe5, 0xd8, 0xab,
	0xda, 0xfb, 0xda, 0x27, 0x39, 0xa3, 0x10, 0xae, 0x9b, 0xb6, 0x7e, 0x0f, 0x4a, 0x87, 0xde, 0x31,
	0xba, 0x0f, 0x4e, 0xbc, 0x81, 0x4b, 0xc9, 0x07, 0x50, 0xa6, 0x6c, 0xd9, 0x32, 0xc3, 0x35, 0x47,
	0x97, 0x68, 0x02, 0xd1, 0x6f, 0x43, 0x71, 0xcf, 0xb3, 0x8e, 0x03, 0xc3, 0xf3, 0x28, 0xb9, 0x09,
	0xd0, 0x63, 0x8b, 0x96, 0xef, 0x79, 0x11, 0xba, 0x6c, 0x14, 0x7b, 0xe2, 0x33, 0xc3, 0xee, 0x74,
	0x4d, 0xd7, 0xc5, 0x5e, 0xb3, 0xc1, 0xb0, 0x56, 0xb4, 0x48, 0xe2, 0x28, 0xf2, 0x9d, 0xa6, 0xad,
	0x37, 0x61, 0x31, 0x8c, 0xe4, 0x31, 0xd2, 0x53, 0xcf, 0x3f, 0x7e, 0x60, 0xdb, 0x3e, 0x06, 0x01,
	0xa9, 0xc3, 0x72, 0x14, 0x91, 0x1b, 0xed, 0xb7, 0xcc, 0xe8, 0x03, 0x77, 0xb6, 0x48, 0x5f, 0xb5,
	0x61, 0x6e, 0x1f, 0x45, 0x54, 0x45, 0x6e, 0x39, 0x6f, 0x92, 0x5b, 0xbe, 0xd3, 0xb4, 0x19, 0x76,
	0xdf, 0x3c, 0x3b, 0x41, 0x97, 0x46, 0xd8, 0x7e, 0xb4, 0x90, 0xb0, 0x7c, 0xa7, 0x69, 0xeb, 0x9f,
	0x42, 0x85, 0x63, 0x39, 0x5d, 0x1f, 0xc1, 0x9c, 0xc0, 0x2b, 0x84, 0x55, 0xfa, 0x32, 0x4c, 0xbf,
	0x0b, 0x70, 0x80, 0x96, 0x8f, 0xf4, 0xa1, 0x19, 0x74, 0xc9, 0x7b, 0x50, 0x0a, 0xc2, 0x55, 0xab,
	0x6b, 0x06, 0x5d, 0x7e, 0x0f, 0x08, 0x62, 0x80, 0xfe, 0x05, 0x54, 0xb7, 0x19, 0x87, 0xbb, 0xdf,
	0xf6, 0x1d, 0xdf, 0xa4, 0x8e, 0xe7, 0x92, 0x5b, 0x30, 0xdf, 0x66, 0x5b, 0x2d, 0x8c, 0xf7, 0xb8,
	0xab, 0x6a, 0x5b, 0x85, 0xea, 0x6b, 0xc2, 0xd9, 0xe1, 0x59, 0x1f, 0xc9, 0x0a, 0xe4, 0xa3, 0x93,
	0xb9, 0x1f, 0xbe, 0x62, 0xd7, 0xde, 0x75, 0xad, 0x08, 0xc8, 0xae, 0x8d, 0xae, 0xd5, 0x52, 0x80,
	0x45, 0x14, 0x9f, 0xf5, 0x0f, 0xa1, 0x20, 0xb2, 0xb1, 0x0a, 0x05, 0x95, 0x7f, 0xb1, 0xd4, 0x7f,
	0xd2, 0xa0, 0xcc, 0xa2, 0x3f, 0x74, 0x4e, 0x90, 0xd5, 0x07, 0xd9, 0x80, 0xbc, 0xc4, 0x49, 0xa9,
	0xfe, 0xce, 0xba, 0x28, 0xdf, 0x75, 0x85, 0x44, 0x83, 0xc3, 0xc8, 0x67, 0x00, 0xd2, 0xed, 0x32,
	0xa1, 0xd1, 0xf5, 0xc4, 0x28, 0x45, 0x89, 0x21, 0x81, 0xc9, 0x96, 0x4a, 0x69, 0x36, 0xb4, 0x5d,
	0x4a, 0x6c, 0x13, 0xf6, 0x15, 0xa2, 0x87, 0x50, 0x39, 0x70, 0x3a, 0x2e, 0xda, 0xbc, 0x5a, 0xc8,
	0x0d, 0x28, 0x06, 0x4e, 0xc7, 0x35, 0xe9, 0xc0, 0x47, 0xc1, 0x43, 0xbc, 0x41, 0x6e, 0x31, 0x2e,
	0x5d, 0x1b, 0x7d, 0x1e, 0xdc, 0x42, 0xe2, 0x80, 0xf3, 0x63, 0x70, 0x00, 0x3b, 0xa8, 0x3f, 0x68,
	0xf7, 0x1c, 0xeb, 0x18, 0xcf, 0xc2, 0x70, 0xca, 0x46, 0xb2, 0xa1, 0xff, 0x9c, 0x85, 0xea, 0xae,
	0x3b, 0xc4, 0x9e, 0xd7, 0x47, 0xe1, 0xfa, 0x4e, 0xea, 0x8d, 0x2a, 0xc7, 0xf3, 0x87, 0x1c, 0x3f,
	0x5b, 0xb2, 0x04, 0x33, 0xae, 0xe7, 0x5a, 0x18, 0x46, 0x92, 0x33, 0xa2, 0x05, 0x69, 0x00, 0xa1,
	0xbe, 0xe9, 0x06, 0x47, 0xe8, 0xfb, 0x68, 0x8b, 0x92, 0x8c, 0xd8, 0x58, 0x4e, 0x4e, 0x93, 0x1e,
	0xbc, 0xb1, 0x20, 0x19, 0xf0, 0xa2, 0xfe, 0x1c, 0x2a, 0x8c, 0xea, 0xe4, 0x80, 0xdc, 0xb8, 0x03,
	0xca, 0x11, 0x96, 0xdb, 0xd6, 0x15, 0x3d, 0x98, 0x09, 0x0d, 0x17, 0x13, 0xc3, 0x58, 0x38, 0x24,
	0x91, 0x60, 0x36, 0x92, 0x2e, 0xe4, 0xd3, 0x36, 0xb1, 0x80, 0x48, 0x62, 0x41, 0x9e, 0x5c, 0xa6,
	0x0a, 0x85, 0xd0, 0xfc, 0x66, 0x2a, 0x56, 0x55, 0x1f, 0x46, 0x8a, 0x06, 0xd9, 0x92, 0x73, 0x3f,
	0x9b, 0x2e, 0x59, 0xa5, 0x4e, 0xa4, 0xa2, 0xd0, 0x87, 0x50, 0xdc, 0xf7, 0x3d, 0x0b, 0x83, 0x00,
	0x6d, 0x76, 0x95, 0x94, 0xd6, 0x28, 0x57, 0x89, 0x45, 0x49, 0x12, 0x20, 0xd5, 0x6f, 0x66, 0x62,
	0xbf, 0xdf, 0x6b, 0x50, 0x6c, 0x60, 0xcf, 0x19, 0xa2, 0x8f, 0x36, 0xd9, 0x85, 0x25, 0x5b, 0x2c,
	0x5a, 0x93, 0x85, 0x40, 0x62, 0x83, 0x47, 0xff, 0x35, 0x96, 0x5f, 0x33, 0x50, 0x89, 0x9e, 0x98,
	0x81, 0xdf, 0x0c, 0x30, 0xa0, 0x53, 0x11, 0x51, 0x57, 0xc4, 0x37, 0x93, 0xb6, 0x89, 0x55, 0x5a,
	0x52, 0xe4, 0x29, 0x1f, 0x3e, 0xb9, 0x1b, 0x6b, 0xd3, 0xd8, 0xda, 0x1e, 0xad, 0x4c, 0x33, 0xff,
	0x4e, 0x99, 0x24, 0x46, 0xf3, 0x13, 0x33, 0xfa, 0xa7, 0x06, 0xe5, 0x6d, 0xb3, 0x67, 0xba, 0x16,
	0xee, 0xfb, 0x9e, 0x77, 0x44, 0x1a, 0x30, 0x8f, 0x5c, 0x31, 0x44, 0x7e, 0x39, 0xad, 0x52, 0x20,
	0x29, 0x4d, 0x31, 0xaa, 0x98, 0x12, 0x19, 0x35, 0x2d, 0x99, 0x29, 0xd2, 0x92, 0x9d, 0x28, 0x2d,
	0x77, 0xe2, 0xae, 0x93, 0x1b, 0x9d, 0x11, 0xd6, 0x9b, 0xe2, 0x5e, 0xf4, 0x4c, 0x83, 0xb2, 0x81,
	0x43, 0x34, 0x7b, 0xbc, 0x1f, 0x4d, 0x53, 0x3d, 0x89, 0xcb, 0xcc, 0xeb, 0x5d, 0x4e, 0x9b, 0x96,
	0xa7, 0x19, 0x98, 0x6b, 0x38, 0x3e, 0x5a, 0xf4, 0x90, 0xcb, 0xe6, 0xff, 0x2c, 0x31, 0x1f, 0xc3,
	0x4c, 0xa8, 0x7d, 0x3c, 0x2f, 0x23, 0x3a, 0x58, 0xf4, 0x9d, 0x6c, 0x40, 0xd1, 0x47, 0xcb, 0xe9,
	0x3b, 0xe8, 0x0a, 0x1d, 0x1f, 0x01, 0x4e, 0x30, 0xfa, 0xf3, 0x0c, 0x90, 0xbd, 0xb0, 0x15, 0x08,
	0x6a, 0xb6, 0xcd, 0x00, 0xaf, 0xe8, 0x89, 0x30, 0xe4, 0x36, 0xe4, 0x98, 0x4a, 0xf0, 0x5a, 0x5b,
	0x49, 0xb0, 0xf2, 0xcc, 0x64, 0x84, 0x18, 0xfd, 0x6f, 0x0d, 0xe6, 0x54, 0x2a, 0xc9, 0x57, 0x50,
	0x6e, 0x9b, 0x41, 0x9a, 0xc2, 0x1b, 0x6a, 0x67, 0x55, 0xa9, 0x37, 0x4a, 0xcc, 0x42, 0x30, 0xb8,
	0x01, 0x45, 0xc7, 0x75, 0xa8, 0x63, 0x52, 0x6f, 0xcc, 0xf8, 0x92, 0x60, 0xd8, 0xb0, 0x43, 0x4d,
	0xbf, 0x83, 0x62, 0x7e, 0x18, 0x35, 0xec, 0x44, 0x00, 0xc6, 0xb4, 0x34, 0x3e, 0xe6, 0xd2, 0x4c,
	0xc7, 0x73, 0xa6, 0x34, 0x53, 0x92, 0x79, 0xc8, 0x1e, 0x21, 0x86, 0xd4, 0x55, 0x0c, 0xf6, 0x53,
	0xdf, 0x86, 0x39, 0x03, 0x8f, 0x06, 0x6e, 0x72, 0xe9, 0x7b, 0x90, 0xf7, 0xc3, 0x1d, 0x7e, 0xdd,
	0xd5, 0xcb, 0xae, 0x6b, 0x70, 0x9c, 0xfe, 0x97, 0x06, 0xa5, 0x3d, 0x21, 0xc6, 0x68, 0xbf, 0xc1,
	0xea, 0x53, 0x0a, 0x24, 0x3b, 0x41, 0x81, 0xa4, 0x3a, 0x59, 0x6e, 0xc2, 0x11, 0xf6, 0x87, 0x2c,
	0x54, 0xbf, 0x76, 0x68, 0xd7, 0xf6, 0xcd, 0x53, 0xd1, 0x7c, 0x9f, 0x8c, 0xfb, 0x93, 0x69, 0xba,
	0xe1, 0x68, 0xca, 0x07, 0x28, 0xcd, 0x75, 0xd9, 0x89, 0xe6, 0xba, 0xfb, 0x50, 0xea, 0x9b, 0x3e,
	0x75, 0x2c, 0xa7, 0x6f, 0xc6, 0xdd, 0x79, 0x04, 0x71, 0x32, 0x8a, 0x7c, 0x09, 0xd5, 0x53, 0x4e,
	0x81, 0x18, 0x59, 0x67, 0xc6, 0xb5, 0xf5, 0x39, 0x81, 0xe6, 0x43, 0xeb, 0x1e, 0x2c, 0x4b, 0xc7,
	0xb5, 0x26, 0x6e, 0x0c, 0x4b, 0x92, 0xd5, 0x41, 0xdc, 0x23, 0x7e, 0xc9, 0xc2, 0xac, 0xc8, 0xc8,
	0x55, 0x2a, 0xde, 0x64, 0x2a, 0x48, 0x03, 0x16, 0xd8, 0xbe, 0x8b, 0xbe, 0x74, 0x52, 0x61, 0xfc,
	0x49, 0xf3, 0xdc, 0x22, 0x49, 0xe8, 0xb3, 0x1c, 0xac, 0xee, 0x78, 0x5e, 0x1f, 0xd9, 0x48, 0x37,
	0xc4, 0x03, 0xa4, 0xb4, 0x87, 0x6f, 0xc1, 0x5b, 0xdb, 0x82, 0xb2, 0xc4, 0xda, 0xe6, 0xe5, 0x19,
	0x56, 0x60, 0xe4, 0x21, 0xc8, 0x64, 0x6f, 0xb6, 0xda, 0xd1, 0x98, 0x3a, 0x3e, 0xcf, 0x8b, 0xb2,
	0x09, 0x1f, 0x6c, 0x53, 0x01, 0xd4, 0x79, 0x8e, 0x5f, 0x13, 0x40, 0x3d, 0x15, 0x40, 0x3d, 0x0e,
	0xa0, 0x30, 0x69, 0x00, 0x75, 0x11, 0xc0, 0x63, 0x58, 0x51, 0xae, 0x32, 0xf1, 0xdf, 0x7f, 0x72,
	0x91, 0x6e, 0x26, 0x95, 0xf2, 0x32, 0x07, 0x0b, 0xaf, 0x54, 0xca, 0x55, 0x89, 0x5c, 0x95, 0x48,
	0x22, 0x49, 0xea, 0x79, 0x75, 0xe9, 0xbc, 0xe2, 0xe4, 0xe7, 0xd5, 0xe3, 0xf3, 0xb6, 0xd7, 0x7e,
	0x3f, 0xaf, 0x5d, 0x7b, 0x71, 0x5e, 0xd3, 0x5e, 0x9e, 0xd7, 0xb4, 0xef, 0x2e, 0x6a, 0xda, 0x8f,
	0x17, 0x35, 0xed, 0xf9, 0x45, 0x4d, 0xfb, 0xed, 0xa2, 0xa6, 0xbd, 0xb8, 0xa8, 0x69, 0x4f, 0xff,
	0xa8, 0x5d, 0x6b, 0xe7, 0xc3, 0x7f, 0x09, 0xdf, 0xff, 0x27, 0x00, 0x00, 0xff, 0xff, 0x75, 0x51,
	0xdc, 0xd4, 0x50, 0x16, 0x00, 0x00,
}
