syntax = "proto3";

package messages;

import "gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.equal_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.gostring_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.stringer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.verbose_equal_all) = true;

// basic types definition
message ChainID {
   uint64 chain_id = 1; 
}

message TokenAmount{
    uint64 token_amount = 1;
}

message LocksRoot{
    bytes locks_root = 1;
}

message ChannelID{
    uint64 channel_id = 1;
}

message TokenNetworkAddress{
    bytes token_network_address = 1;
}

message MessageID{
    uint64 message_id = 1;
}

message PaymentID{
    uint64 payment_id = 1;
}

message PaymentAmount{
    uint64 payment_amount = 1;
}

message SecretHash{
    bytes secret_hash = 1;
}

message BlockExpiration{
    uint64 block_expiration = 1;
}

message SecretType{
    bytes secret = 1;
}

message EncSecret{
    bytes enc_secret = 1;
}

message Address{
    bytes address = 1;
}

message HashTimeLock{
    PaymentAmount amount = 1;
    BlockExpiration expiration = 2;
    SecretHash secret_hash = 3;
}

// messages definition
// SignedMessage(Message)
message SignedMessage{
    bytes signature = 1;
    Address sender = 2;
    bytes publickey = 3;
}

// EnvelopeMessage(SignedMessage)
//!!! check data to sign
message EnvelopeMessage{
    ChainID chain_id = 1;
    uint64 nonce = 2;
    TokenAmount transferred_amount = 3;
    TokenAmount locked_amount = 4;
    LocksRoot locks_root = 5;
    ChannelID channel_id = 6;
    TokenNetworkAddress token_network_address = 7;
    SignedMessage signature = 8;
}

//Processed(SignedMessage)
message Processed{
    MessageID message_id = 1;
    SignedMessage signature = 2;
}

//Delivered(SignedMessage)
message Delivered{
    MessageID delivered_message_id = 1;
    SignedMessage signature = 2;
}

//SecretRequest(SignedMessage)
message SecretRequest{
    MessageID message_id = 1;
    PaymentID payment_id = 2;
    SecretHash secret_hash = 3;
    TokenAmount amount = 4;
    BlockExpiration expiration = 5;
    SignedMessage signature = 6;
}

// Secret(EnvelopeMessage)
message BalanceProof{
    EnvelopeMessage envelope_message = 1;
    MessageID message_id = 2;
    PaymentID payment_id = 3;
    SecretType secret = 4;
}

// RevealSecret(SignedMessage)
message RevealSecret{
    MessageID message_id = 1;
    SecretType secret = 2;
    SignedMessage signature = 6;
}

// DirectTransfer(EnvelopeMessage)
message DirectTransfer{
    EnvelopeMessage envelope_message = 1;
    MessageID message_id = 2;
    PaymentID payment_id = 3;
    Address token = 4;
    Address recipient = 5;
}

// LockedTransferBase(EnvelopeMessage)
message LockedTransferBase{
    EnvelopeMessage envelope_message = 1;
    MessageID message_id = 2;
    PaymentID payment_id = 3;
    Address token = 4;
    Address recipient = 5;
    HashTimeLock lock = 6;
}

// LockedTransfer(LockedTransferBase)
message LockedTransfer{
    LockedTransferBase base_message = 1;
    Address initiator = 2;
    Address target = 3;
    EncSecret enc_secret = 4;
    uint32 fee = 5;
}

// RefundTransfer(LockedTransfer)
message RefundTransfer {
    LockedTransfer refund = 1;
}

// LockExpired(EnvelopeMessage)
message LockExpired{
    EnvelopeMessage envelope_message = 1;
    MessageID message_id = 2;
    Address recipient = 3;
    SecretHash secret_hash = 4;
}

message WithdrawRequest{
    TokenNetworkAddress token_network_address = 1;
    MessageID message_id = 2;
    ChannelID channel_id = 3;
    Address participant = 4;
    TokenAmount withdraw_amount = 5;
    SignedMessage participant_signature = 6;
}

message Withdraw{
    TokenNetworkAddress token_network_address = 1;
    MessageID message_id = 2;
    ChannelID channel_id = 3;
    Address participant = 4;
    TokenAmount withdraw_amount = 5;
    SignedMessage participant_signature = 6;
    SignedMessage partner_signature = 7;
}

message CooperativeSettleRequest{
    TokenNetworkAddress token_network_address = 1;
    MessageID message_id = 2;
    ChannelID channel_id = 3;
    Address participant1 = 4;
    TokenAmount participant1_balance = 5;
    Address participant2 = 6;
    TokenAmount participant2_balance = 7;
    SignedMessage participant1_signature = 8;
}

message	CooperativeSettle{
    TokenNetworkAddress token_network_address = 1;
    MessageID message_id = 2;
    ChannelID channel_id = 3;
    Address participant1 = 4;
    TokenAmount participant1_balance = 5;
    Address participant2 = 6;
    TokenAmount participant2_balance = 7;
    SignedMessage participant1_signature = 8;
    SignedMessage participant2_signature = 9;
}
