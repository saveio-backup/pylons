// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: examples/raiden/messages/paymentproxy.proto

package messages

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PaymentProxy struct {
	Initiator []byte `protobuf:"bytes,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
	Target    []byte `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Amount    uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	PaymentID uint64 `protobuf:"varint,4,opt,name=paymentID,proto3" json:"paymentID,omitempty"`
	Publickey []byte `protobuf:"bytes,5,opt,name=publickey,proto3" json:"publickey,omitempty"`
	Signature []byte `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *PaymentProxy) Reset()      { *m = PaymentProxy{} }
func (*PaymentProxy) ProtoMessage() {}
func (*PaymentProxy) Descriptor() ([]byte, []int) {
	return fileDescriptor_paymentproxy_65da40b48567a1a4, []int{0}
}
func (m *PaymentProxy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentProxy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentProxy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PaymentProxy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentProxy.Merge(dst, src)
}
func (m *PaymentProxy) XXX_Size() int {
	return m.Size()
}
func (m *PaymentProxy) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentProxy.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentProxy proto.InternalMessageInfo

func (m *PaymentProxy) GetInitiator() []byte {
	if m != nil {
		return m.Initiator
	}
	return nil
}

func (m *PaymentProxy) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *PaymentProxy) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *PaymentProxy) GetPaymentID() uint64 {
	if m != nil {
		return m.PaymentID
	}
	return 0
}

func (m *PaymentProxy) GetPublickey() []byte {
	if m != nil {
		return m.Publickey
	}
	return nil
}

func (m *PaymentProxy) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// bootstrap command to register the ip address to address mapping
// NOTE: this cannot be replaced even when the endpoint contract is available
// since the ip address is the connection for paymentproxy message, not the one for channel
type BootStrap struct {
	Sender    []byte `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	IsClient  bool   `protobuf:"varint,2,opt,name=isClient,proto3" json:"isClient,omitempty"`
	Publickey []byte `protobuf:"bytes,3,opt,name=publickey,proto3" json:"publickey,omitempty"`
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *BootStrap) Reset()      { *m = BootStrap{} }
func (*BootStrap) ProtoMessage() {}
func (*BootStrap) Descriptor() ([]byte, []int) {
	return fileDescriptor_paymentproxy_65da40b48567a1a4, []int{1}
}
func (m *BootStrap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BootStrap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BootStrap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BootStrap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BootStrap.Merge(dst, src)
}
func (m *BootStrap) XXX_Size() int {
	return m.Size()
}
func (m *BootStrap) XXX_DiscardUnknown() {
	xxx_messageInfo_BootStrap.DiscardUnknown(m)
}

var xxx_messageInfo_BootStrap proto.InternalMessageInfo

func (m *BootStrap) GetSender() []byte {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *BootStrap) GetIsClient() bool {
	if m != nil {
		return m.IsClient
	}
	return false
}

func (m *BootStrap) GetPublickey() []byte {
	if m != nil {
		return m.Publickey
	}
	return nil
}

func (m *BootStrap) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type BootStrapResponse struct {
	Sender    []byte `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	IsClient  bool   `protobuf:"varint,2,opt,name=isClient,proto3" json:"isClient,omitempty"`
	Publickey []byte `protobuf:"bytes,3,opt,name=publickey,proto3" json:"publickey,omitempty"`
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *BootStrapResponse) Reset()      { *m = BootStrapResponse{} }
func (*BootStrapResponse) ProtoMessage() {}
func (*BootStrapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_paymentproxy_65da40b48567a1a4, []int{2}
}
func (m *BootStrapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BootStrapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BootStrapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BootStrapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BootStrapResponse.Merge(dst, src)
}
func (m *BootStrapResponse) XXX_Size() int {
	return m.Size()
}
func (m *BootStrapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BootStrapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BootStrapResponse proto.InternalMessageInfo

func (m *BootStrapResponse) GetSender() []byte {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *BootStrapResponse) GetIsClient() bool {
	if m != nil {
		return m.IsClient
	}
	return false
}

func (m *BootStrapResponse) GetPublickey() []byte {
	if m != nil {
		return m.Publickey
	}
	return nil
}

func (m *BootStrapResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*PaymentProxy)(nil), "messages.PaymentProxy")
	proto.RegisterType((*BootStrap)(nil), "messages.BootStrap")
	proto.RegisterType((*BootStrapResponse)(nil), "messages.BootStrapResponse")
}
func (this *PaymentProxy) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PaymentProxy)
	if !ok {
		that2, ok := that.(PaymentProxy)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PaymentProxy")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PaymentProxy but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PaymentProxy but is not nil && this == nil")
	}
	if !bytes.Equal(this.Initiator, that1.Initiator) {
		return fmt.Errorf("Initiator this(%v) Not Equal that(%v)", this.Initiator, that1.Initiator)
	}
	if !bytes.Equal(this.Target, that1.Target) {
		return fmt.Errorf("Target this(%v) Not Equal that(%v)", this.Target, that1.Target)
	}
	if this.Amount != that1.Amount {
		return fmt.Errorf("Amount this(%v) Not Equal that(%v)", this.Amount, that1.Amount)
	}
	if this.PaymentID != that1.PaymentID {
		return fmt.Errorf("PaymentID this(%v) Not Equal that(%v)", this.PaymentID, that1.PaymentID)
	}
	if !bytes.Equal(this.Publickey, that1.Publickey) {
		return fmt.Errorf("Publickey this(%v) Not Equal that(%v)", this.Publickey, that1.Publickey)
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return fmt.Errorf("Signature this(%v) Not Equal that(%v)", this.Signature, that1.Signature)
	}
	return nil
}
func (this *PaymentProxy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PaymentProxy)
	if !ok {
		that2, ok := that.(PaymentProxy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Initiator, that1.Initiator) {
		return false
	}
	if !bytes.Equal(this.Target, that1.Target) {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	if this.PaymentID != that1.PaymentID {
		return false
	}
	if !bytes.Equal(this.Publickey, that1.Publickey) {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	return true
}
func (this *BootStrap) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BootStrap)
	if !ok {
		that2, ok := that.(BootStrap)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BootStrap")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BootStrap but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BootStrap but is not nil && this == nil")
	}
	if !bytes.Equal(this.Sender, that1.Sender) {
		return fmt.Errorf("Sender this(%v) Not Equal that(%v)", this.Sender, that1.Sender)
	}
	if this.IsClient != that1.IsClient {
		return fmt.Errorf("IsClient this(%v) Not Equal that(%v)", this.IsClient, that1.IsClient)
	}
	if !bytes.Equal(this.Publickey, that1.Publickey) {
		return fmt.Errorf("Publickey this(%v) Not Equal that(%v)", this.Publickey, that1.Publickey)
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return fmt.Errorf("Signature this(%v) Not Equal that(%v)", this.Signature, that1.Signature)
	}
	return nil
}
func (this *BootStrap) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BootStrap)
	if !ok {
		that2, ok := that.(BootStrap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Sender, that1.Sender) {
		return false
	}
	if this.IsClient != that1.IsClient {
		return false
	}
	if !bytes.Equal(this.Publickey, that1.Publickey) {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	return true
}
func (this *BootStrapResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BootStrapResponse)
	if !ok {
		that2, ok := that.(BootStrapResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BootStrapResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BootStrapResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BootStrapResponse but is not nil && this == nil")
	}
	if !bytes.Equal(this.Sender, that1.Sender) {
		return fmt.Errorf("Sender this(%v) Not Equal that(%v)", this.Sender, that1.Sender)
	}
	if this.IsClient != that1.IsClient {
		return fmt.Errorf("IsClient this(%v) Not Equal that(%v)", this.IsClient, that1.IsClient)
	}
	if !bytes.Equal(this.Publickey, that1.Publickey) {
		return fmt.Errorf("Publickey this(%v) Not Equal that(%v)", this.Publickey, that1.Publickey)
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return fmt.Errorf("Signature this(%v) Not Equal that(%v)", this.Signature, that1.Signature)
	}
	return nil
}
func (this *BootStrapResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BootStrapResponse)
	if !ok {
		that2, ok := that.(BootStrapResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Sender, that1.Sender) {
		return false
	}
	if this.IsClient != that1.IsClient {
		return false
	}
	if !bytes.Equal(this.Publickey, that1.Publickey) {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	return true
}
func (this *PaymentProxy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&messages.PaymentProxy{")
	s = append(s, "Initiator: "+fmt.Sprintf("%#v", this.Initiator)+",\n")
	s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "PaymentID: "+fmt.Sprintf("%#v", this.PaymentID)+",\n")
	s = append(s, "Publickey: "+fmt.Sprintf("%#v", this.Publickey)+",\n")
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BootStrap) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&messages.BootStrap{")
	s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	s = append(s, "IsClient: "+fmt.Sprintf("%#v", this.IsClient)+",\n")
	s = append(s, "Publickey: "+fmt.Sprintf("%#v", this.Publickey)+",\n")
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BootStrapResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&messages.BootStrapResponse{")
	s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	s = append(s, "IsClient: "+fmt.Sprintf("%#v", this.IsClient)+",\n")
	s = append(s, "Publickey: "+fmt.Sprintf("%#v", this.Publickey)+",\n")
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPaymentproxy(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *PaymentProxy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentProxy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Initiator) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPaymentproxy(dAtA, i, uint64(len(m.Initiator)))
		i += copy(dAtA[i:], m.Initiator)
	}
	if len(m.Target) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPaymentproxy(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	if m.Amount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPaymentproxy(dAtA, i, uint64(m.Amount))
	}
	if m.PaymentID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPaymentproxy(dAtA, i, uint64(m.PaymentID))
	}
	if len(m.Publickey) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPaymentproxy(dAtA, i, uint64(len(m.Publickey)))
		i += copy(dAtA[i:], m.Publickey)
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPaymentproxy(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	return i, nil
}

func (m *BootStrap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BootStrap) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPaymentproxy(dAtA, i, uint64(len(m.Sender)))
		i += copy(dAtA[i:], m.Sender)
	}
	if m.IsClient {
		dAtA[i] = 0x10
		i++
		if m.IsClient {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Publickey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPaymentproxy(dAtA, i, uint64(len(m.Publickey)))
		i += copy(dAtA[i:], m.Publickey)
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPaymentproxy(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	return i, nil
}

func (m *BootStrapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BootStrapResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPaymentproxy(dAtA, i, uint64(len(m.Sender)))
		i += copy(dAtA[i:], m.Sender)
	}
	if m.IsClient {
		dAtA[i] = 0x10
		i++
		if m.IsClient {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Publickey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPaymentproxy(dAtA, i, uint64(len(m.Publickey)))
		i += copy(dAtA[i:], m.Publickey)
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPaymentproxy(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	return i, nil
}

func encodeVarintPaymentproxy(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PaymentProxy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Initiator)
	if l > 0 {
		n += 1 + l + sovPaymentproxy(uint64(l))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovPaymentproxy(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovPaymentproxy(uint64(m.Amount))
	}
	if m.PaymentID != 0 {
		n += 1 + sovPaymentproxy(uint64(m.PaymentID))
	}
	l = len(m.Publickey)
	if l > 0 {
		n += 1 + l + sovPaymentproxy(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovPaymentproxy(uint64(l))
	}
	return n
}

func (m *BootStrap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovPaymentproxy(uint64(l))
	}
	if m.IsClient {
		n += 2
	}
	l = len(m.Publickey)
	if l > 0 {
		n += 1 + l + sovPaymentproxy(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovPaymentproxy(uint64(l))
	}
	return n
}

func (m *BootStrapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovPaymentproxy(uint64(l))
	}
	if m.IsClient {
		n += 2
	}
	l = len(m.Publickey)
	if l > 0 {
		n += 1 + l + sovPaymentproxy(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovPaymentproxy(uint64(l))
	}
	return n
}

func sovPaymentproxy(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPaymentproxy(x uint64) (n int) {
	return sovPaymentproxy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PaymentProxy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PaymentProxy{`,
		`Initiator:` + fmt.Sprintf("%v", this.Initiator) + `,`,
		`Target:` + fmt.Sprintf("%v", this.Target) + `,`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`PaymentID:` + fmt.Sprintf("%v", this.PaymentID) + `,`,
		`Publickey:` + fmt.Sprintf("%v", this.Publickey) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BootStrap) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BootStrap{`,
		`Sender:` + fmt.Sprintf("%v", this.Sender) + `,`,
		`IsClient:` + fmt.Sprintf("%v", this.IsClient) + `,`,
		`Publickey:` + fmt.Sprintf("%v", this.Publickey) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BootStrapResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BootStrapResponse{`,
		`Sender:` + fmt.Sprintf("%v", this.Sender) + `,`,
		`IsClient:` + fmt.Sprintf("%v", this.IsClient) + `,`,
		`Publickey:` + fmt.Sprintf("%v", this.Publickey) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPaymentproxy(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PaymentProxy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaymentproxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentProxy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentProxy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initiator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentproxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaymentproxy
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Initiator = append(m.Initiator[:0], dAtA[iNdEx:postIndex]...)
			if m.Initiator == nil {
				m.Initiator = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentproxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaymentproxy
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = append(m.Target[:0], dAtA[iNdEx:postIndex]...)
			if m.Target == nil {
				m.Target = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentproxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentID", wireType)
			}
			m.PaymentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentproxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Publickey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentproxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaymentproxy
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Publickey = append(m.Publickey[:0], dAtA[iNdEx:postIndex]...)
			if m.Publickey == nil {
				m.Publickey = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentproxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaymentproxy
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaymentproxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaymentproxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BootStrap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaymentproxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BootStrap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BootStrap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentproxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaymentproxy
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsClient", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentproxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsClient = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Publickey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentproxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaymentproxy
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Publickey = append(m.Publickey[:0], dAtA[iNdEx:postIndex]...)
			if m.Publickey == nil {
				m.Publickey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentproxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaymentproxy
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaymentproxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaymentproxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BootStrapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaymentproxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BootStrapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BootStrapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentproxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaymentproxy
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsClient", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentproxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsClient = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Publickey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentproxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaymentproxy
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Publickey = append(m.Publickey[:0], dAtA[iNdEx:postIndex]...)
			if m.Publickey == nil {
				m.Publickey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentproxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaymentproxy
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaymentproxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaymentproxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPaymentproxy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPaymentproxy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPaymentproxy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPaymentproxy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPaymentproxy
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPaymentproxy
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPaymentproxy(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPaymentproxy = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPaymentproxy   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("examples/raiden/messages/paymentproxy.proto", fileDescriptor_paymentproxy_65da40b48567a1a4)
}

var fileDescriptor_paymentproxy_65da40b48567a1a4 = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x91, 0x31, 0x4e, 0xf3, 0x30,
	0x18, 0x86, 0xf3, 0xfd, 0xed, 0x5f, 0xb5, 0x56, 0x17, 0x32, 0x20, 0xab, 0x42, 0x56, 0xd5, 0xa9,
	0x12, 0x88, 0x0c, 0xdc, 0xa0, 0xb0, 0xb0, 0x55, 0xe1, 0x04, 0x2e, 0xfd, 0x88, 0x2c, 0x1a, 0xdb,
	0xb2, 0x1d, 0xa9, 0x15, 0x0b, 0x12, 0x17, 0xe0, 0x18, 0x9c, 0x80, 0x33, 0x30, 0x76, 0xec, 0xd8,
	0xa6, 0x17, 0xe0, 0x08, 0xc8, 0x4e, 0x9a, 0x0a, 0x06, 0x46, 0xb6, 0xbc, 0xef, 0x13, 0x7d, 0xcf,
	0x2b, 0x99, 0x9c, 0xe3, 0x92, 0xe7, 0x7a, 0x81, 0x36, 0x31, 0x5c, 0xcc, 0x51, 0x26, 0x39, 0x5a,
	0xcb, 0x33, 0xb4, 0x89, 0xe6, 0xab, 0x1c, 0xa5, 0xd3, 0x46, 0x2d, 0x57, 0x97, 0xda, 0x28, 0xa7,
	0xe2, 0xee, 0x01, 0x0e, 0x46, 0x99, 0xca, 0x54, 0x12, 0xda, 0x59, 0xf1, 0x90, 0xf8, 0x14, 0x42,
	0xf8, 0xaa, 0xfe, 0x1e, 0xbd, 0x03, 0xe9, 0x4f, 0xab, 0x23, 0x53, 0x7f, 0x24, 0x3e, 0x23, 0x3d,
	0x21, 0x85, 0x13, 0xdc, 0x29, 0x43, 0x61, 0x08, 0xe3, 0x7e, 0x7a, 0x2c, 0xe2, 0x53, 0xd2, 0x71,
	0xdc, 0x64, 0xe8, 0xe8, 0xbf, 0x80, 0xea, 0xe4, 0x7b, 0x9e, 0xab, 0x42, 0x3a, 0xda, 0x1a, 0xc2,
	0xb8, 0x9d, 0xd6, 0xc9, 0x5f, 0xab, 0x27, 0xde, 0xde, 0xd0, 0x76, 0x40, 0xc7, 0x22, 0xd0, 0x62,
	0xb6, 0x10, 0xf7, 0x8f, 0xb8, 0xa2, 0xff, 0x2b, 0x57, 0x53, 0x78, 0x6a, 0x45, 0x26, 0xb9, 0x2b,
	0x0c, 0xd2, 0x4e, 0x45, 0x9b, 0x62, 0xf4, 0x44, 0x7a, 0x13, 0xa5, 0xdc, 0x9d, 0x33, 0x5c, 0x7b,
	0xbd, 0x45, 0x39, 0xc7, 0xc3, 0xe2, 0x3a, 0xc5, 0x03, 0xd2, 0x15, 0xf6, 0x7a, 0x21, 0x50, 0x56,
	0x83, 0xbb, 0x69, 0x93, 0xbf, 0xcb, 0x5b, 0xbf, 0xca, 0xdb, 0x3f, 0xe5, 0x2f, 0x40, 0x4e, 0x1a,
	0x7b, 0x8a, 0x56, 0x2b, 0x69, 0xf1, 0xaf, 0x57, 0x4c, 0x2e, 0x36, 0x3b, 0x16, 0x6d, 0x77, 0x0c,
	0x3e, 0x77, 0x0c, 0x9e, 0x4b, 0x06, 0x6f, 0x25, 0x83, 0x8f, 0x92, 0xc1, 0xba, 0x64, 0xb0, 0x2d,
	0x19, 0xbc, 0xee, 0x59, 0xb4, 0xde, 0xb3, 0x68, 0xb3, 0x67, 0xd1, 0xac, 0x13, 0x1e, 0xfc, 0xea,
	0x2b, 0x00, 0x00, 0xff, 0xff, 0x67, 0xbe, 0xd8, 0x53, 0x4d, 0x02, 0x00, 0x00,
}
